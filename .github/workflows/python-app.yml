name: Python Checks

on:
  push:
    branches: '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.8']

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - name: Cache python modules 3.8
      uses: actions/cache@v2
      if: ${{ matrix.python == '3.8'}}
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements.lint.txt') }}

    - name: Install dependencies
      run: |
        make install

    - name: Local installation of package
      run: |
        pip install -e .

    - name: Git Check (tests may not alter any git visible files)
      run: |
        git status -sb --porcelain
        [ -z "$(git status --porcelain)" ]

    # - name: Lint Code (use uppercase TODO, XXX, FIXME, NOTE and explain nopep8)
    #   run: |
    #     make lint-comment

    # - name: Lint Code (use empty main inits)
    #   run: |
    #     make lint-emptyinit

    # - name: Lint Code (sort requirements)
    #   run: |
    #     make lint-requirements

    # - name: Lint Code (use f"" style formating)
    #   run: |
    #     make lint-stringformat

    # - name: Lint Code (indent in fours)
    #   run: |
    #     make lint-indent

    # - name: Lint Code (no f"a", "{a}", or f'{a}')
    #   run: |
    #     make lint-forgottenformat

    # - name: Only pyi in stubs
    #   run: |
    #     make lint-pyi

    # - name: Lint Code (missing trailing comma)
    #   run: |
    #     make lint-flake8

    # - name: Lint Code (pycodestyle)
    #   run: |
    #     make lint-pycodestyle

    # - name: Lint Code (type-check)
    #   run: |
    #     make lint-type-check

    # - name: Lint Code (pylint)
    #   run: |
    #     make lint-pylint

    # - name: Run Tests Coverage
    #   run: |
    #     make coverage-report

    - name: Check Before
      run: |
        echo "SONAR_HOST_URL: ${SONAR_HOST_URL}"
        echo "SONAR_TOKEN: ${SONAR_TOKEN}"

    - name: SonarQube
      # uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        TEST_VAR: 900000
      run: |
        printenv
        echo "SONAR_HOST_URL: ${SONAR_HOST_URL}"
        echo "env.SONAR_HOST_URL: ${env.SONAR_HOST_URL}"
        echo "secrets.SONAR_HOST_URL: ${secrets.SONAR_HOST_URL}"
        echo "env.secrets.SONAR_HOST_URL: ${env.secrets.SONAR_HOST_URL}"
        echo "SONAR_TOKEN: ${SONAR_TOKEN}"
        echo "TEST_VAR: ${TEST_VAR}"

    - name: Check After
      run: |
        echo ${SONAR_HOST_URL} ${env.SONAR_HOST_URL} ${secrets.SONAR_HOST_URL} ${env.secrets.SONAR_HOST_URL}
        echo ${SONAR_TOKEN}
