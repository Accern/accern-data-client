name: Python Checks

on:
  push:
    branches: ['*']

jobs:
  lints:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.9']

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - name: Cache python modules
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements.lint.txt') }}

    - name: Install dependencies
      run: |
        make install

    - name: Lint Code (use uppercase TODO, XXX, FIXME, NOTE and explain nopep8)
      run: |
        make lint-comment

    - name: Lint Code (use empty main inits)
      run: |
        make lint-emptyinit

    - name: Lint Code (sort requirements)
      run: |
        make lint-requirements

    - name: Lint Code (use f"" style formating)
      run: |
        make lint-stringformat

    - name: Lint Code (indent in fours)
      run: |
        make lint-indent

    - name: Lint Code (no f"a", "{a}", or f'{a}')
      run: |
        make lint-forgottenformat

    - name: Only pyi in stubs
      run: |
        make lint-pyi

    - name: Lint Code (missing trailing comma)
      run: |
        make lint-flake8

    - name: Lint Code (pycodestyle)
      run: |
        make lint-pycodestyle

    - name: Lint Code (type-check)
      run: |
        make lint-type-check

    - name: Lint Code (pylint)
      run: |
        make lint-pylint

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.7', '3.8', '3.9']
        ci_node_total: [2]
        ci_node_index: [0, 1]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - name: Get last commit hash
      id: last-commit
      run: |
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
        # echo "LAST_COMMIT=$(git rev-parse HEAD^1)" >> $GITHUB_ENV
        # echo ${{ env.LAST_COMMIT }}

    - name: Restore test-result Cache
      uses: actions/cache@v3
      with:
        path: test-results/*
        key:  v1-test-results-cache-${{ matrix.python }}
        restore-keys: |
          test-results-${{ matrix.python }}-

    - name: Cache python modules
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements.lint.txt') }}

    - name: Install dependencies
      run: |
        make install

    - name: Local installation of package
      run: |
        pip install -e .

    - name: Lint Code (type-check)
      run: |
        make lint-type-check

    - name: Run test on Node ${{ matrix.ci_node_index }}
      run: |
        set -e
        mkdir -p test-results

        pwd
        ls -al test-results

        OUT=$(python -c "from tests.utils import split_tests; split_tests('/Users/ankurgoswami/Documents/accern-data-client/test-results/results.xml', ${{ matrix.ci_node_total }}, ${{ matrix.ci_node_index }})")
        IFS=',' read -a FILES <<< "$OUT"
        echo "ARRAY1######################" ${FILES[@]}
        ./coverage/coverage.sh result-${{ matrix.python }}-${{ matrix.ci_node_index }}.xml ${FILES[@]}

        pwd
        ls -al
        ls -al test-results

    - name: Upload Artifact(results)
      uses: actions/upload-artifact@v3
      with:
        name: result-${{ matrix.python }}-${{ matrix.ci_node_index }}
        path: test-results/result-${{ matrix.python }}-${{ matrix.ci_node_index }}.xml

    - name: Remove local test-results folder
      run: |
        rm -r test-results

    - name: Upload Artifact(coverage reports)
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.python }}-${{ matrix.ci_node_index }}
        path: .coverage

    - name: Git Check (tests may not alter any git visible files)
      run: |
        git status -sb --porcelain
        [ -z "$(git status --porcelain)" ]

  coverage:
    needs: tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.7', '3.8', '3.9']
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - name: Get current commit hash
      run: |
        echo "CUR_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo ${{ env.CUR_COMMIT }}

    - name: Cache python modules
      uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}-${{ hashFiles('**/requirements.lint.txt') }}

    - name: Install dependencies
      run: |
        make install
        mkdir -p test-results/parts

    - name: Download all results
      # Downloads result-*.xml,
      uses: actions/download-artifact@v2
    - name: Merge results
      run: |
        mv result-${{ matrix.python }}-*/result-${{ matrix.python }}-* test-results/parts/
        ls -l test-results/parts
        python3 -c "from tests.utils import merge_results; merge_results('./test-results', 'result.xml')"
        ls -l test-results

    - name: Restore test-result Cache (Dummy step)
      uses: actions/cache@v3
      with:
        path: test-results/*
        key:  v1-test-results-${{ matrix.python }}-${{ hashFiles('test-results/result.xml') }}

    - name: Download all coverage reports
      uses: actions/download-artifact@v2
    - name: Merge coverage reports
      run: |
        coverage combine coverage*/.coverage
        coverage xml -o coverage/reports/xml_report.xml
        coverage html -d coverage/reports/html_report
        coverage report

    - name: SonarQube
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
