"""
This type stub file was generated by pyright.
"""

import functools
import numpy as np
from typing import Any, Callable
from pandas._typing import Scalar

def generate_numba_apply_func(kwargs: dict[str, Any], func: Callable[..., Scalar], engine_kwargs: dict[str, bool] | None, name: str): # -> ((...) -> Unknown) | ((values: ndarray, begin: ndarray, end: ndarray, minimum_periods: int, *args: Any) -> ndarray):
    """
    Generate a numba jitted apply function specified by values from engine_kwargs.

    1. jit the user's function
    2. Return a rolling apply function with the jitted function inline

    Configurations specified in engine_kwargs apply to both the user's
    function _AND_ the rolling apply function.

    Parameters
    ----------
    kwargs : dict
        **kwargs to be passed into the function
    func : function
        function to be applied to each window and will be JITed
    engine_kwargs : dict
        dictionary of arguments to be passed into numba.jit
    name: str
        name of the caller (Rolling/Expanding)

    Returns
    -------
    Numba function
    """
    ...

def generate_numba_ewm_func(engine_kwargs: dict[str, bool] | None, com: float, adjust: bool, ignore_na: bool, deltas: np.ndarray, normalize: bool): # -> ((...) -> Unknown) | ((values: ndarray, begin: ndarray, end: ndarray, minimum_periods: int) -> ndarray):
    """
    Generate a numba jitted ewm mean or sum function specified by values
    from engine_kwargs.

    Parameters
    ----------
    engine_kwargs : dict
        dictionary of arguments to be passed into numba.jit
    com : float
    adjust : bool
    ignore_na : bool
    deltas : numpy.ndarray
    normalize : bool

    Returns
    -------
    Numba function
    """
    ...

def generate_numba_table_func(kwargs: dict[str, Any], func: Callable[..., np.ndarray], engine_kwargs: dict[str, bool] | None, name: str): # -> ((...) -> Unknown) | ((values: ndarray, begin: ndarray, end: ndarray, minimum_periods: int, *args: Any) -> Any):
    """
    Generate a numba jitted function to apply window calculations table-wise.

    Func will be passed a M window size x N number of columns array, and
    must return a 1 x N number of columns array. Func is intended to operate
    row-wise, but the result will be transposed for axis=1.

    1. jit the user's function
    2. Return a rolling apply function with the jitted function inline

    Parameters
    ----------
    kwargs : dict
        **kwargs to be passed into the function
    func : function
        function to be applied to each window and will be JITed
    engine_kwargs : dict
        dictionary of arguments to be passed into numba.jit
    name : str
        caller (Rolling/Expanding) and original method name for numba cache key

    Returns
    -------
    Numba function
    """
    ...

@functools.lru_cache(maxsize=None)
def generate_manual_numpy_nan_agg_with_axis(nan_func): # -> (table: Unknown) -> ndarray:
    ...

def generate_numba_ewm_table_func(engine_kwargs: dict[str, bool] | None, com: float, adjust: bool, ignore_na: bool, deltas: np.ndarray, normalize: bool): # -> ((...) -> Unknown) | ((values: ndarray, begin: ndarray, end: ndarray, minimum_periods: int) -> ndarray):
    """
    Generate a numba jitted ewm mean or sum function applied table wise specified
    by values from engine_kwargs.

    Parameters
    ----------
    engine_kwargs : dict
        dictionary of arguments to be passed into numba.jit
    com : float
    adjust : bool
    ignore_na : bool
    deltas : numpy.ndarray
    normalize: bool

    Returns
    -------
    Numba function
    """
    ...

