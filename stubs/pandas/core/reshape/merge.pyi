# Stubs for pandas.core.reshape.merge (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument

from typing import Any, Optional

def merge(left: Any, right: Any, how: str = ..., on: Optional[Any] = ...,
          left_on: Optional[Any] = ..., right_on: Optional[Any] = ...,
          left_index: bool = ..., right_index: bool = ..., sort: bool = ...,
          suffixes: Any = ..., copy: bool = ..., indicator: bool = ...,
          validate: Optional[Any] = ...) -> Any:
    ...


def merge_ordered(left: Any, right: Any, on: Optional[Any] = ...,
                  left_on: Optional[Any] = ..., right_on: Optional[Any] = ...,
                  left_by: Optional[Any] = ..., right_by: Optional[Any] = ...,
                  fill_method: Optional[Any] = ..., suffixes: Any = ...,
                  how: str = ...) -> Any:
    ...


def merge_asof(left: Any, right: Any, on: Optional[Any] = ...,
               left_on: Optional[Any] = ..., right_on: Optional[Any] = ...,
               left_index: bool = ..., right_index: bool = ...,
               by: Optional[Any] = ..., left_by: Optional[Any] = ...,
               right_by: Optional[Any] = ..., suffixes: Any = ...,
               tolerance: Optional[Any] = ..., allow_exact_matches: bool = ...,
               direction: str = ...) -> Any:
    ...


class _MergeOperation:
    left: Any = ...
    right: Any = ...
    how: Any = ...
    axis: Any = ...
    on: Any = ...
    left_on: Any = ...
    right_on: Any = ...
    copy: Any = ...
    suffixes: Any = ...
    sort: Any = ...
    left_index: Any = ...
    right_index: Any = ...
    indicator: Any = ...
    indicator_name: Any = ...

    def __init__(self, left: Any, right: Any, how: str = ...,
                 on: Optional[Any] = ..., left_on: Optional[Any] = ...,
                 right_on: Optional[Any] = ..., axis: int = ...,
                 left_index: bool = ..., right_index: bool = ...,
                 sort: bool = ..., suffixes: Any = ..., copy: bool = ...,
                 indicator: bool = ..., validate: Optional[Any] = ...) -> None:
        ...


    def get_result(self) -> Any:
        ...


class _OrderedMerge(_MergeOperation):
    fill_method: Any = ...

    def __init__(self, left: Any, right: Any, on: Optional[Any] = ...,
                 left_on: Optional[Any] = ..., right_on: Optional[Any] = ...,
                 left_index: bool = ..., right_index: bool = ...,
                 axis: int = ..., suffixes: Any = ..., copy: bool = ...,
                 fill_method: Optional[Any] = ..., how: str = ...) -> None:
        ...


    def get_result(self) -> Any:
        ...



class _AsOfMerge(_OrderedMerge):
    by: Any = ...
    left_by: Any = ...
    right_by: Any = ...
    tolerance: Any = ...
    allow_exact_matches: Any = ...
    direction: Any = ...

    def __init__(self, left: Any, right: Any, on: Optional[Any] = ...,
                 left_on: Optional[Any] = ..., right_on: Optional[Any] = ...,
                 left_index: bool = ..., right_index: bool = ...,
                 by: Optional[Any] = ..., left_by: Optional[Any] = ...,
                 right_by: Optional[Any] = ..., axis: int = ...,
                 suffixes: Any = ..., copy: bool = ...,
                 fill_method: Optional[Any] = ..., how: str = ...,
                 tolerance: Optional[Any] = ...,
                 allow_exact_matches: bool = ...,
                 direction: str = ...) -> None:
        ...



def validate_operand(obj: Any) -> Any:
    ...
