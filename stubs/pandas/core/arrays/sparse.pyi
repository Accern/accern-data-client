# Stubs for pandas.core.arrays.sparse (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-import,unused-argument,invalid-name,redefined-builtin
# pylint: disable=too-few-public-methods,no-self-use,function-redefined
# pylint: disable=redefined-outer-name,too-many-ancestors,super-init-not-called
# pylint: disable=too-many-arguments,arguments-differ,keyword-arg-before-vararg

from typing import Any, Optional
from pandas._typing import Dtype
from pandas.core.accessor import PandasDelegate
from pandas.core.arrays import ExtensionArray, ExtensionOpsMixin
from pandas.core.base import PandasObject
from pandas.core.dtypes.base import ExtensionDtype

class SparseDtype(ExtensionDtype):
    def __init__(self, dtype: Dtype = ..., fill_value: Any = ...) -> None:
        ...

    def __hash__(self) -> int:
        ...

    def __eq__(self, other: Any) -> bool:
        ...

    @property
    def fill_value(self) -> Any:
        ...

    @property
    def kind(self) -> Any:
        ...

    @property
    def type(self) -> Any:
        ...

    @property
    def subtype(self) -> Any:
        ...

    @property
    def name(self) -> Any:
        ...

    @classmethod
    def construct_array_type(cls) -> Any:
        ...

    @classmethod
    def construct_from_string(cls, string: Any) -> Any:
        ...

    @classmethod
    def is_dtype(cls, dtype: Any) -> bool:
        ...

    def update_dtype(self, dtype: Any) -> Any:
        ...


class SparseArray(PandasObject, ExtensionArray, ExtensionOpsMixin):
    def __init__(self, data: Any, sparse_index: Optional[Any] = ...,
                 index: Optional[Any] = ..., fill_value: Optional[Any] = ...,
                 kind: str = ..., dtype: Optional[Any] = ...,
                 copy: bool = ...) -> None:
        ...

    @classmethod
    def from_spmatrix(cls, data: Any) -> Any:
        ...

    def __array__(self, dtype: Optional[Any] = ..., copy: bool = ...) -> Any:
        ...

    def __setitem__(self, key: Any, value: Any) -> None:
        ...

    @property
    def sp_index(self) -> Any:
        ...

    @property
    def sp_values(self) -> Any:
        ...

    @property
    def dtype(self) -> Any:
        ...

    @property
    def fill_value(self) -> Any:
        ...

    @fill_value.setter
    def fill_value(self, value: Any) -> None:
        ...

    @property
    def kind(self) -> Any:
        ...

    def __len__(self) -> Any:
        ...

    @property
    def nbytes(self) -> Any:
        ...

    @property
    def density(self) -> Any:
        ...

    @property
    def npoints(self) -> Any:
        ...

    @property
    def values(self) -> Any:
        ...

    def isna(self) -> Any:
        ...

    def fillna(self, value: Optional[Any] = ..., method: Optional[Any] = ...,
               limit: Optional[Any] = ...) -> Any:
        ...

    def shift(self, periods: int = ...,
              fill_value: Optional[Any] = ...) -> Any:
        ...

    def unique(self) -> Any:
        ...

    def factorize(self, na_sentinel: int = ...) -> Any:
        ...

    def value_counts(self, dropna: bool = ...) -> Any:
        ...

    def __getitem__(self, key: Any) -> Any:
        ...

    def take(self, indices: Any, allow_fill: bool = ...,
             fill_value: Optional[Any] = ...) -> Any:
        ...

    def searchsorted(self, v: Any, side: str = ...,
                     sorter: Optional[Any] = ...) -> Any:
        ...

    def copy(self) -> Any:
        ...

    def astype(self, dtype: Optional[Any] = ..., copy: bool = ...) -> Any:
        ...

    def map(self, mapper: Any) -> Any:
        ...

    def to_dense(self) -> Any:
        ...

    def get_values(self) -> Any:
        ...

    def nonzero(self) -> Any:
        ...

    def all(self, axis: Optional[Any] = ..., *args: Any, **kwargs: Any) -> Any:
        ...

    def any(self, axis: int = ..., *args: Any, **kwargs: Any) -> Any:
        ...

    def sum(self, axis: int = ..., *args: Any, **kwargs: Any) -> Any:
        ...

    def cumsum(self, axis: int = ..., *args: Any, **kwargs: Any) -> Any:
        ...

    def mean(self, axis: int = ..., *args: Any, **kwargs: Any) -> Any:
        ...

    def transpose(self, *axes: Any) -> Any:
        ...

    @property
    def T(self) -> Any:
        ...

    def __array_ufunc__(self, ufunc: Any, method: Any, *inputs: Any,
                        **kwargs: Any) -> Any:
        ...

    def __abs__(self) -> Any:
        ...


def make_sparse(arr: Any, kind: str = ..., fill_value: Optional[Any] = ...,
                dtype: Optional[Any] = ..., copy: bool = ...) -> Any:
    ...


class BaseAccessor:
    def __init__(self, data: Optional[Any] = ...) -> None:
        ...


class SparseAccessor(BaseAccessor, PandasDelegate):
    @classmethod
    def from_coo(cls, A: Any, dense_index: bool = ...) -> Any:
        ...

    def to_coo(self, row_levels: Any = ..., column_levels: Any = ...,
               sort_labels: bool = ...) -> Any:
        ...

    def to_dense(self) -> Any:
        ...


class SparseFrameAccessor(BaseAccessor, PandasDelegate):
    @classmethod
    def from_spmatrix(cls, data: Any, index: Optional[Any] = ...,
                      columns: Optional[Any] = ...) -> Any:
        ...

    def to_dense(self) -> Any:
        ...

    def to_coo(self) -> Any:
        ...

    @property
    def density(self) -> float:
        ...
