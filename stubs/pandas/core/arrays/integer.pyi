# Stubs for pandas.core.arrays.integer (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin


from typing import Any, Optional, Type
from pandas.core.arrays import ExtensionArray, ExtensionOpsMixin
from pandas.core.dtypes.base import ExtensionDtype

class _IntegerDtype(ExtensionDtype):
    name: str = ...
    base: Any = ...
    type: Type = ...
    na_value: Any = ...

    def is_signed_integer(self) -> Any:
        ...

    def is_unsigned_integer(self) -> Any:
        ...

    def numpy_dtype(self) -> Any:
        ...

    @property
    def kind(self) -> Any:
        ...

    def itemsize(self) -> Any:
        ...

    @classmethod
    def construct_array_type(cls) -> Any:
        ...


def integer_array(
        values: Any, dtype: Optional[Any] = ..., copy: bool = ...) -> Any:
    ...


def safe_cast(values: Any, dtype: Any, copy: Any) -> Any:
    ...


def coerce_to_array(
        values: Any, dtype: Any, mask: Optional[Any] = ...,
        copy: bool = ...) -> Any:
    ...


class IntegerArray(ExtensionArray, ExtensionOpsMixin):
    @property
    def dtype(self) -> Any:
        ...

    def __init__(self, values: Any, mask: Any, copy: bool = ...) -> None:
        ...

    def __getitem__(self, item: Any) -> Any:
        ...

    __array_priority__: int = ...

    def __array__(self, dtype: Optional[Any] = ...) -> Any:
        ...

    def __array_ufunc__(
            self, ufunc: Any, method: Any, *inputs: Any, **kwargs: Any) -> Any:
        ...

    def __iter__(self) -> None:
        ...

    def take(self, indexer: Any, allow_fill: bool = ...,
             fill_value: Optional[Any] = ...) -> Any:
        ...

    def copy(self) -> Any:
        ...

    def __setitem__(self, key: Any, value: Any) -> None:
        ...

    def __len__(self) -> Any:
        ...

    @property
    def nbytes(self) -> Any:
        ...

    def isna(self) -> Any:
        ...

    def astype(self, dtype: Any, copy: bool = ...) -> Any:
        ...

    def value_counts(self, dropna: bool = ...) -> Any:
        ...


Int8Dtype: Any
Int16Dtype: Any
Int32Dtype: Any
Int64Dtype: Any
UInt8Dtype: Any
UInt16Dtype: Any
UInt32Dtype: Any
UInt64Dtype: Any
