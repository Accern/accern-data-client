# Stubs for pandas.core.arrays.interval (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-import,unused-argument,invalid-name,redefined-builtin
# pylint: disable=too-few-public-methods,no-self-use,function-redefined
# pylint: disable=redefined-outer-name,too-many-ancestors,super-init-not-called
# pylint: disable=too-many-arguments,arguments-differ,no-name-in-module

from typing import Any, Optional
from pandas._libs.interval import IntervalMixin
from pandas.core.arrays.base import ExtensionArray

class IntervalArray(IntervalMixin, ExtensionArray):
    ndim: int = ...
    can_hold_na: bool = ...

    def __new__(cls, data: Any, closed: Optional[Any] = ...,
                dtype: Optional[Any] = ..., copy: bool = ...,
                verify_integrity: bool = ...) -> Any:
        ...

    @classmethod
    def from_breaks(cls, breaks: Any, closed: str = ..., copy: bool = ...,
                    dtype: Optional[Any] = ...) -> Any:
        ...

    @classmethod
    def from_arrays(cls, left: Any, right: Any, closed: str = ...,
                    copy: bool = ..., dtype: Optional[Any] = ...) -> Any:
        ...

    @classmethod
    def from_tuples(cls, data: Any, closed: str = ..., copy: bool = ...,
                    dtype: Optional[Any] = ...) -> Any:
        ...

    def __iter__(self) -> Any:
        ...

    def __len__(self) -> Any:
        ...

    def __getitem__(self, value: Any) -> Any:
        ...

    def __setitem__(self, key: Any, value: Any) -> None:
        ...

    def fillna(self, value: Optional[Any] = ..., method: Optional[Any] = ...,
               limit: Optional[Any] = ...) -> Any:
        ...

    @property
    def dtype(self) -> Any:
        ...

    def astype(self, dtype: Any, copy: bool = ...) -> Any:
        ...

    def copy(self) -> Any:
        ...

    def isna(self) -> Any:
        ...

    @property
    def nbytes(self) -> Any:
        ...

    @property
    def size(self) -> Any:
        ...

    @property
    def shape(self) -> Any:
        ...

    def take(self, indices: Any, allow_fill: bool = ...,
             fill_value: Optional[Any] = ..., axis: Optional[Any] = ...,
             **kwargs: Any) -> Any:
        ...

    def value_counts(self, dropna: bool = ...) -> Any:
        ...

    @property
    def left(self) -> Any:
        ...

    @property
    def right(self) -> Any:
        ...

    @property
    def closed(self) -> Any:
        ...

    def set_closed(self, closed: Any) -> Any:
        ...

    @property
    def length(self) -> Any:
        ...

    @property
    def mid(self) -> Any:
        ...

    @property
    def is_non_overlapping_monotonic(self) -> Any:
        ...

    def __array__(self, dtype: Optional[Any] = ...) -> Any:
        ...

    def to_tuples(self, na_tuple: bool = ...) -> Any:
        ...

    def repeat(self, repeats: Any, axis: Optional[Any] = ...) -> Any:
        ...

    def contains(self, other: Any) -> Any:
        ...

    def overlaps(self, other: Any) -> Any:
        ...


def maybe_convert_platform_interval(values: Any) -> Any:
    ...
