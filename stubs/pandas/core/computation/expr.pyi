# Stubs for pandas.core.computation.expr (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias


import ast
from typing import Any, Optional, Type
from pandas.core.base import StringMixin
from pandas.core.computation.ops import Term
from pandas.core.computation.scope import Scope as Scope

def tokenize_string(source: Any) -> Any:
    ...

def disallow(nodes: Any) -> Any:
    ...

def add_ops(op_classes: Any) -> Any:
    ...


class BaseExprVisitor(ast.NodeVisitor):
    const_type: Type[Term] = ...
    term_type: Any = ...
    binary_ops: Any = ...
    binary_op_nodes: Any = ...
    binary_op_nodes_map: Any = ...
    unary_ops: Any = ...
    unary_op_nodes: Any = ...
    unary_op_nodes_map: Any = ...
    rewrite_map: Any = ...
    env: Any = ...
    engine: Any = ...
    parser: Any = ...
    preparser: Any = ...
    assigner: Any = ...

    def __init__(self, env: Any, engine: Any, parser: Any,
                 preparser: Any = ...) -> None:
        ...

    def visit(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Module(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Expr(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_BinOp(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Div(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_UnaryOp(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Name(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_NameConstant(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Num(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Str(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_List(self, node: Any, **kwargs: Any) -> Any:
        ...

    visit_Tuple: Any = ...

    def visit_Index(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Subscript(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Slice(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Assign(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Attribute(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Call(self, node: Any, side: Optional[Any] = ..., **kwargs: Any) -> Any:
        ...

    def translate_In(self, op: Any) -> Any:
        ...

    def visit_Compare(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_BoolOp(self, node: Any, **kwargs: Any) -> Any:
        ...


class PandasExprVisitor(BaseExprVisitor):
    def __init__(self, env: Any, engine: Any, parser: Any,
                 preparser: Any = ...) -> None:
        ...


class PythonExprVisitor(BaseExprVisitor):
    def __init__(self, env: Any, engine: Any, parser: Any,
                 preparser: Any = ...) -> None:
        ...


class Expr(StringMixin):
    expr: Any = ...
    env: Any = ...
    engine: Any = ...
    parser: Any = ...
    terms: Any = ...

    def __init__(self, expr: Any, engine: str = ..., parser: str = ...,
                 env: Optional[Any] = ..., truediv: bool = ...,
                 level: int = ...) -> None:
        ...

    @property
    def assigner(self) -> Any:
        ...

    def __call__(self) -> Any:
        ...

    def __len__(self) -> Any:
        ...

    def parse(self) -> Any:
        ...

    @property
    def names(self) -> Any:
        ...
