# Stubs for pandas.core.computation.pytables (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-import,unused-argument,invalid-name,redefined-builtin
# pylint: disable=too-few-public-methods,no-self-use,function-redefined
# pylint: disable=redefined-outer-name,too-many-ancestors,super-init-not-called
# pylint: disable=too-many-arguments,arguments-differ

from typing import Any, Optional
import pandas.core.computation.expr as expr
import pandas.core.computation.ops as ops

from pandas.core.computation.expr import BaseExprVisitor


class Scope(expr.Scope):
    queryables: Any = ...

    def __init__(self, level: Any, global_dict: Optional[Any] = ...,
                 local_dict: Optional[Any] = ...,
                 queryables: Optional[Any] = ...) -> None:
        ...


class Term(ops.Term):
    def __new__(cls, name: Any, env: Any, side: Optional[Any] = ...,
                encoding: Optional[Any] = ...) -> Any:
        ...

    def __init__(self, name: Any, env: Any, side: Optional[Any] = ...,
                 encoding: Optional[Any] = ...) -> None:
        ...

    @property
    def value(self) -> Any:
        ...


class Constant(Term):
    def __init__(self, value: Any, env: Any, side: Optional[Any] = ...,
                 encoding: Optional[Any] = ...) -> None:
        ...


class BinOp(ops.BinOp):
    queryables: Any = ...
    encoding: Any = ...
    filter: Any = ...
    condition: Any = ...

    def __init__(self, op: Any, lhs: Any, rhs: Any, queryables: Any,
                 encoding: Any) -> None:
        ...

    def prune(self, klass: Any) -> Any:
        ...

    def conform(self, rhs: Any) -> Any:
        ...

    @property
    def is_valid(self) -> Any:
        ...

    @property
    def is_in_table(self) -> Any:
        ...

    @property
    def kind(self) -> Any:
        ...

    @property
    def meta(self) -> Any:
        ...

    @property
    def metadata(self) -> Any:
        ...

    def generate(self, v: Any) -> Any:
        ...

    def convert_value(self, v: Any) -> Any:
        ...

    def convert_values(self) -> None:
        ...


class FilterBinOp(BinOp):
    filter: Any = ...
    def invert(self) -> Any:
        ...

    def format(self) -> Any:
        ...

    def evaluate(self) -> Any:  # type: ignore
        ...

    def generate_filter_op(self, invert: bool = ...) -> Any:
        ...


class JointFilterBinOp(FilterBinOp):
    def format(self) -> None:
        ...

    def evaluate(self) -> Any:  # type: ignore
        ...


class ConditionBinOp(BinOp):
    def invert(self) -> None:
        ...

    def format(self) -> Any:
        ...

    condition: Any = ...
    def evaluate(self) -> Any:  # type: ignore
        ...


class JointConditionBinOp(ConditionBinOp):
    condition: Any = ...

    def evaluate(self) -> Any:  # type: ignore
        ...


class UnaryOp(ops.UnaryOp):
    def prune(self, klass: Any) -> Any:
        ...


class ExprVisitor(BaseExprVisitor):
    const_type: Any = ...
    term_type: Any = ...

    def __init__(self, env: Any, engine: Any, parser: Any,
                 **kwargs: Any) -> None:
        ...

    def visit_UnaryOp(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Index(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Assign(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Subscript(self, node: Any, **kwargs: Any) -> Any:
        ...

    def visit_Attribute(self, node: Any, **kwargs: Any) -> Any:
        ...

    def translate_In(self, op: Any) -> Any:
        ...


class Expr(expr.Expr):
    encoding: Any = ...
    condition: Any = ...
    filter: Any = ...
    terms: Any = ...
    expr: Any = ...
    env: Any = ...

    def __init__(self, where: Any, queryables: Optional[Any] = ...,
                 encoding: Optional[Any] = ...,
                 scope_level: int = ...) -> None:
        ...

    def evaluate(self) -> Any:
        ...


class TermValue:
    value: Any = ...
    converted: Any = ...
    kind: Any = ...
    def __init__(self, value: Any, converted: Any, kind: Any) -> None:
        ...

    def tostring(self, encoding: Any) -> Any:
        ...


def maybe_expression(s: Any) -> Any:
    ...
