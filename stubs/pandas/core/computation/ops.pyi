# Stubs for pandas.core.computation.ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-import,unused-argument,invalid-name,redefined-builtin
# pylint: disable=too-few-public-methods,no-self-use,function-redefined
# pylint: disable=redefined-outer-name,too-many-ancestors,super-init-not-called
# pylint: disable=too-many-arguments

from pandas.core.base import StringMixin
from typing import Any, Optional


class UndefinedVariableError(NameError):
    def __init__(self, name: Any, is_local: Any) -> None:
        ...


class Term(StringMixin):
    def __new__(cls, name: Any, env: Any, side: Optional[Any] = ...,
                encoding: Optional[Any] = ...) -> Any:
        ...

    env: Any = ...
    side: Any = ...
    is_local: Any = ...
    encoding: Any = ...

    def __init__(self, name: Any, env: Any, side: Optional[Any] = ...,
                 encoding: Optional[Any] = ...) -> None:
        ...

    @property
    def local_name(self) -> Any:
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        ...

    def evaluate(self, *args: Any, **kwargs: Any) -> Any:
        ...

    value: Any = ...

    def update(self, value: Any) -> None:
        ...

    @property
    def is_scalar(self) -> Any:
        ...

    @property
    def type(self) -> Any:
        ...

    return_type: Any = ...
    @property
    def raw(self) -> Any:
        ...

    @property
    def is_datetime(self) -> Any:
        ...

    @property  # type: ignore
    def value(self) -> Any:
        ...

    @value.setter
    def value(self, new_value: Any) -> None:
        ...

    @property
    def name(self) -> Any:
        ...

    @property
    def ndim(self) -> Any:
        ...


class Constant(Term):
    def __init__(self, value: Any, env: Any, side: Optional[Any] = ...,
                 encoding: Optional[Any] = ...) -> None:
        ...

    @property
    def name(self) -> Any:
        ...


class Op(StringMixin):
    op: Any = ...
    operands: Any = ...
    encoding: Any = ...

    def __init__(self, op: Any, operands: Any, *args: Any,
                 **kwargs: Any) -> None:
        ...

    def __iter__(self) -> Any:
        ...

    @property
    def return_type(self) -> Any:
        ...

    @property
    def has_invalid_return_type(self) -> Any:
        ...

    @property
    def operand_types(self) -> Any:
        ...

    @property
    def is_scalar(self) -> Any:
        ...

    @property
    def is_datetime(self) -> Any:
        ...


def is_term(obj: Any) -> Any:
        ...


class BinOp(Op):
    lhs: Any = ...
    rhs: Any = ...
    func: Any = ...

    def __init__(self, op: Any, lhs: Any, rhs: Any, **kwargs: Any) -> None:
        ...

    def __call__(self, env: Any) -> Any:
        ...

    def evaluate(self, env: Any, engine: Any, parser: Any, term_type: Any,
                 eval_in_python: Any) -> Any:
        ...

    def convert_values(self) -> Any:
        ...


def isnumeric(dtype: Any) -> Any:
        ...


class Div(BinOp):
    def __init__(self, lhs: Any, rhs: Any, truediv: Any, *args: Any,
                 **kwargs: Any) -> None:
        ...


class UnaryOp(Op):
    operand: Any = ...
    func: Any = ...

    def __init__(self, op: Any, operand: Any) -> None:
        ...

    def __call__(self, env: Any) -> Any:
        ...

    @property
    def return_type(self) -> Any:
        ...


class MathCall(Op):
    func: Any = ...

    def __init__(self, func: Any, args: Any) -> None:
        ...

    def __call__(self, env: Any) -> Any:
        ...


class FuncNode:
    name: Any = ...
    func: Any = ...

    def __init__(self, name: Any) -> None:
        ...

    def __call__(self, *args: Any) -> Any:
        ...
