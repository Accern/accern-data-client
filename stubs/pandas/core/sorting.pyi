# Stubs for pandas.core.sorting (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member


from typing import Any, Optional

def get_group_index(labels: Any, shape: Any, sort: Any, xnull: Any) -> Any:
    ...


def get_compressed_ids(labels: Any, sizes: Any) -> Any:
    ...


def is_int64_overflow_possible(shape: Any) -> Any:
    ...


def decons_group_index(comp_labels: Any, shape: Any) -> Any:
    ...


def decons_obs_group_ids(comp_ids: Any, obs_ids: Any, shape: Any,
                         labels: Any, xnull: Any) -> Any:
    ...


def indexer_from_factorized(labels: Any, shape: Any,
                            compress: bool = ...) -> Any:
    ...


def lexsort_indexer(keys: Any, orders: Optional[Any] = ...,
                    na_position: str = ...) -> Any:
    ...


def nargsort(items: Any, kind: str = ..., ascending: bool = ...,
             na_position: str = ...) -> Any:
    ...


class _KeyMapper:
    levels: Any = ...
    labels: Any = ...
    comp_ids: Any = ...
    k: Any = ...
    tables: Any = ...

    def __init__(self, comp_ids: Any, ngroups: Any, levels: Any,
                 labels: Any) -> None:
        ...


    def get_key(self, comp_id: Any) -> Any:
        ...


def get_flattened_iterator(
        comp_ids: Any, ngroups: Any, levels: Any, labels: Any) -> Any:
    ...


def get_indexer_dict(label_list: Any, keys: Any) -> Any:
    ...


def get_group_index_sorter(group_index: Any, ngroups: Any) -> Any:
    ...


def compress_group_index(group_index: Any, sort: bool = ...) -> Any:
    ...


def safe_sort(
        values: Any, labels: Optional[Any] = ..., na_sentinel: int = ...,
        assume_unique: bool = ..., verify: bool = ...) -> Any:
    ...
