# Stubs for pandas.core.groupby.generic (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,no-self-use,arguments-differ
# pylint: disable=line-too-long,keyword-arg-before-vararg,abstract-method

from collections import namedtuple
from pandas._typing import FrameOrSeries
from pandas.core.groupby.groupby import GroupBy
from typing import Any, Callable, FrozenSet, Iterator, Optional, Type, Union

NamedAgg = namedtuple('NamedAgg', ['column', 'aggfunc'])
AggScalar = Union[str, Callable[..., Any]]
ScalarResult: Any


def whitelist_method_generator(base_class: Type[GroupBy],
                               klass: Type[FrameOrSeries],
                               whitelist: FrozenSet[str]) -> Iterator[str]:
    ...


class NDFrameGroupBy(GroupBy):
    def aggregate(self, func: Any, *args: Any, **kwargs: Any) -> Any:
        ...

    agg: Any = ...

    def transform(self, func: Any, *args: Any, **kwargs: Any) -> Any:
        ...

    def filter(self, func: Any, dropna: bool = ..., *args: Any,
               **kwargs: Any) -> Any:
        ...


class SeriesGroupBy(GroupBy):
    def apply(self, func: Any, *args: Any, **kwargs: Any) -> Any:
        ...

    def aggregate(self, func_or_funcs: Optional[Any] = ..., *args: Any, **kwargs: Any) -> Any:  # type: ignore
        ...

    agg: Any = ...

    def transform(self, func: Any, *args: Any, **kwargs: Any) -> Any:
        ...

    def filter(self, func: Any, dropna: bool = ..., *args: Any,
               **kwargs: Any) -> Any:
        ...

    def nunique(self, dropna: bool = ...) -> Any:
        ...

    def describe(self, **kwargs: Any) -> Any:
        ...

    def value_counts(self, normalize: bool = ..., sort: bool = ...,
                     ascending: bool = ..., bins: Optional[Any] = ...,
                     dropna: bool = ...) -> Any:
        ...

    def count(self) -> Any:
        ...

    def pct_change(self, periods: int = ..., fill_method: str = ..., limit: Optional[Any] = ..., freq: Optional[Any] = ...) -> Any:  # type: ignore
        ...


class DataFrameGroupBy(NDFrameGroupBy):
    def aggregate(self, arg: Optional[Any] = ..., *args: Any, **kwargs: Any) -> Any:  # type: ignore
        ...

    agg: Any = ...

    def count(self) -> Any:
        ...

    def nunique(self, dropna: bool = ...) -> Any:
        ...

    boxplot: Any = ...
