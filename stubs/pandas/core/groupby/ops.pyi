# Stubs for pandas.core.groupby.ops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument, no-self-use

from typing import Any, Optional

def generate_bins_generic(values: Any, binner: Any, closed: Any) -> Any:
        ...


class BaseGrouper:
    axis: Any = ...
    groupings: Any = ...
    sort: Any = ...
    group_keys: Any = ...
    mutated: Any = ...
    indexer: Any = ...

    def __init__(self, axis: Any, groupings: Any, sort: bool = ...,
                 group_keys: bool = ..., mutated: bool = ...,
                 indexer: Optional[Any] = ...) -> None:
        ...

    @property
    def shape(self) -> Any:
        ...

    def __iter__(self) -> Any:
        ...

    @property
    def nkeys(self) -> Any:
        ...

    def get_iterator(self, data: Any, axis: int = ...) -> None:
        ...

    def apply(self, f: Any, data: Any, axis: int = ...) -> Any:
        ...

    def indices(self) -> Any:
        ...

    @property
    def labels(self) -> Any:
        ...

    @property
    def levels(self) -> Any:
        ...

    @property
    def names(self) -> Any:
        ...

    def size(self) -> Any:
        ...

    def groups(self) -> Any:
        ...

    def is_monotonic(self) -> Any:
        ...

    def group_info(self) -> Any:
        ...

    def label_info(self) -> Any:
        ...

    def ngroups(self) -> Any:
        ...

    @property
    def recons_labels(self) -> Any:
        ...

    def result_index(self) -> Any:
        ...

    def get_group_levels(self) -> Any:
        ...

    def aggregate(self, values: Any, how: Any, axis: int = ...,
                  min_count: int = ...) -> Any:
        ...

    def transform(self, values: Any, how: Any, axis: int = ...,
                  **kwargs: Any) -> Any:
        ...

    def agg_series(self, obj: Any, func: Any) -> Any:
        ...


class BinGrouper(BaseGrouper):
    bins: Any = ...
    binlabels: Any = ...
    mutated: Any = ...
    indexer: Any = ...

    def __init__(self, bins: Any, binlabels: Any, filter_empty: bool = ...,
                 mutated: bool = ..., indexer: Optional[Any] = ...) -> None:
        ...

    def groups(self) -> Any:
        ...

    @property
    def nkeys(self) -> Any:
        ...

    def get_iterator(self, data: Any, axis: int = ...) -> Any:
        ...

    def indices(self) -> Any:
        ...

    def group_info(self) -> Any:
        ...

    def result_index(self) -> Any:
        ...

    @property
    def levels(self) -> Any:
        ...

    @property
    def names(self) -> Any:
        ...

    @property
    def groupings(self) -> Any:
        ...

    def agg_series(self, obj: Any, func: Any) -> Any:
        ...


class DataSplitter:
    data: Any = ...
    labels: Any = ...
    ngroups: Any = ...
    axis: Any = ...

    def __init__(self, data: Any, labels: Any, ngroups: Any,
                 axis: int = ...) -> None:
        ...

    def slabels(self) -> Any:
        ...

    def sort_idx(self) -> Any:
        ...

    def __iter__(self) -> None:
        ...

    def apply(self, f: Any) -> None:
        ...


class SeriesSplitter(DataSplitter):
    ...


class FrameSplitter(DataSplitter):
    def fast_apply(self, f: Any, names: Any) -> Any:
        ...


def get_splitter(data: Any, *args: Any, **kwargs: Any) -> Any:
        ...
