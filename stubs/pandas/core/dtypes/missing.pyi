# Stubs for pandas.core.dtypes.missing (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias

from typing import Any
from .common import (
    _NS_DTYPE as _NS_DTYPE,
    _TD_DTYPE as _TD_DTYPE,
    ensure_object as ensure_object,
    is_bool_dtype as is_bool_dtype,
    is_complex_dtype as is_complex_dtype,
    is_datetime64_dtype as is_datetime64_dtype,
    is_datetime64tz_dtype as is_datetime64tz_dtype,
    is_datetimelike as is_datetimelike,
    is_datetimelike_v_numeric as is_datetimelike_v_numeric,
    is_dtype_equal as is_dtype_equal,
    is_extension_array_dtype as is_extension_array_dtype,
    is_float_dtype as is_float_dtype,
    is_integer_dtype as is_integer_dtype,
    is_object_dtype as is_object_dtype,
    is_period_dtype as is_period_dtype,
    is_scalar as is_scalar,
    is_string_dtype as is_string_dtype,
    is_string_like_dtype as is_string_like_dtype,
    is_timedelta64_dtype as is_timedelta64_dtype,
    needs_i8_conversion as needs_i8_conversion,
    pandas_dtype as pandas_dtype,
)
from .generic import (
    ABCDatetimeArray as ABCDatetimeArray,
    ABCExtensionArray as ABCExtensionArray,
    ABCGeneric as ABCGeneric,
    ABCIndexClass as ABCIndexClass,
    ABCMultiIndex as ABCMultiIndex,
    ABCSeries as ABCSeries,
    ABCTimedeltaArray as ABCTimedeltaArray,
)
from .inference import is_list_like

isposinf_scalar: Any
isneginf_scalar: Any


def isna(obj: Any) -> Any:
    ...


isnull = isna


def notna(obj: Any) -> Any:
    ...


notnull = notna


def array_equivalent(left: Any, right: Any, strict_nan: bool = ...) -> Any:
    ...


def na_value_for_dtype(dtype: Any, compat: bool = ...) -> Any:
    ...


def remove_na_arraylike(arr: Any) -> Any:
    ...


def is_valid_nat_for_dtype(obj: Any, dtype: Any) -> Any:
    ...
