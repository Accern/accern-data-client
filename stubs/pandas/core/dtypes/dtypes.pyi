# Stubs for pandas.core.dtypes.dtypes (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,super-init-not-called,redefined-outer-name
# pylint: disable=no-self-use,arguments-differ,too-many-arguments
# pylint: disable=dangerous-default-value,too-many-ancestors
# pylint: disable=invalid-name,unused-import,useless-import-alias

from typing import Any, Optional, Tuple, Type, Union

from pandas._libs.tslibs import Period, Timestamp
from pandas.core.dtypes.base import ExtensionDtype as ExtensionDtype
from pandas.core.dtypes.inference import is_list_like

str_type = str
ordered_sentinel: object
OrderedType = Union[None, bool, object]

def register_extension_dtype(cls: Type[ExtensionDtype]) -> Type[ExtensionDtype]:
    ...


class Registry:
    dtypes: Any = ...

    def __init__(self) -> None:
        ...

    def register(self, dtype: Type[ExtensionDtype]) -> None:
        ...

    def find(self,
             dtype: Union[Type[ExtensionDtype], str],
             ) -> Optional[Type[ExtensionDtype]]:
        ...


registry: Any


class PandasExtensionDtype(ExtensionDtype):
    type: Any = ...
    kind: Any = ...
    subdtype: Any = ...
    str: Optional[str_type] = ...
    num: int = ...
    shape: Tuple[int, ...] = ...
    itemsize: int = ...
    base: Any = ...
    isbuiltin: int = ...
    isnative: int = ...

    def __hash__(self) -> int:
        ...

    @classmethod
    def reset_cache(cls: Any) -> None:
        ...


class CategoricalDtypeType(type):
    ...


class CategoricalDtype(PandasExtensionDtype, ExtensionDtype):
    name: str = ...
    type: Type[CategoricalDtypeType] = ...
    kind: str_type = ...
    str: str = ...
    base: Any = ...

    def __init__(self, categories: Any = ...,
                 ordered: OrderedType = ...) -> None:
        ...

    def __hash__(self) -> int:
        ...

    def __eq__(self, other: Any) -> bool:
        ...

    @classmethod
    def construct_array_type(cls) -> Any:
        ...

    @staticmethod
    def validate_ordered(ordered: OrderedType) -> None:
        ...

    @staticmethod
    def validate_categories(categories: Any, fastpath: bool = ...) -> Any:
        ...

    def update_dtype(self, dtype: CategoricalDtype) -> CategoricalDtype:
        ...

    @property
    def categories(self) -> Any:
        ...

    @property
    def ordered(self) -> OrderedType:
        ...


class DatetimeTZDtype(PandasExtensionDtype):
    type: Type[Timestamp] = ...
    kind: str_type = ...
    base: Any = ...
    na_value: Any = ...

    def __init__(self, unit: str = ..., tz: Optional[Any] = ...) -> None:
        ...

    @property
    def unit(self) -> Any:
        ...

    @property
    def tz(self) -> Any:
        ...

    @classmethod
    def construct_array_type(cls) -> Any:
        ...

    @classmethod
    def construct_from_string(cls, string: Any) -> Any:
        ...

    @property
    def name(self) -> Any:
        ...

    def __hash__(self) -> int:
        ...

    def __eq__(self, other: Any) -> Any:
        ...


class PeriodDtype(PandasExtensionDtype):
    type: Type[Period] = ...
    kind: str_type = ...
    str: str = ...
    base: Any = ...
    num: int = ...

    def __new__(cls, freq: Optional[Any] = ...) -> Any:
        ...

    @property
    def freq(self) -> Any:
        ...

    @classmethod
    def construct_from_string(cls, string: Any) -> Any:
        ...

    @property
    def name(self) -> Any:
        ...

    @property
    def na_value(self) -> Any:
        ...

    def __hash__(self) -> int:
        ...

    def __eq__(self, other: Any) -> bool:
        ...

    @classmethod
    def is_dtype(cls, dtype: Any) -> bool:
        ...

    @classmethod
    def construct_array_type(cls) -> Any:
        ...


class IntervalDtype(PandasExtensionDtype):
    name: str = ...
    kind: Optional[str_type] = ...
    str: str = ...
    base: Any = ...
    num: int = ...

    def __new__(cls, subtype: Optional[Any] = ...) -> Any:
        ...

    @property
    def subtype(self) -> Any:
        ...

    @classmethod
    def construct_array_type(cls) -> Any:
        ...

    @classmethod
    def construct_from_string(cls, string: Any) -> Any:
        ...

    @property
    def type(self) -> Any:
        ...

    def __hash__(self) -> int:
        ...

    def __eq__(self, other: Any) -> bool:
        ...

    @classmethod
    def is_dtype(cls, dtype: Any) -> bool:
        ...
