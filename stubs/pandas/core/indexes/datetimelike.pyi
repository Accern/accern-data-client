# Stubs for pandas.core.indexes.datetimelike (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs

from typing import Any, Optional
from pandas.core.accessor import PandasDelegate
from pandas.core.arrays import ExtensionOpsMixin

def ea_passthrough(array_method: Any) -> Any:
    ...


class DatetimeIndexOpsMixin(ExtensionOpsMixin):
    inferred_freq: Any = ...
    hasnans: Any = ...
    resolution: Any = ...
    __iter__: Any = ...
    mean: Any = ...

    @property
    def freq(self) -> Any:
        ...

    @freq.setter
    def freq(self, value: Any) -> None:
        ...

    @property
    def freqstr(self) -> Any:
        ...

    def unique(self, level: Optional[Any] = ...) -> Any:
        ...

    @property
    def values(self) -> Any:
        ...

    @property
    def asi8(self) -> Any:
        ...

    def equals(self, other: Any) -> Any:
        ...

    def __contains__(self, key: Any) -> Any:
        ...

    def map(self, mapper: Any, na_action: Optional[Any] = ...) -> Any:
        ...

    def sort_values(self, return_indexer: bool = ...,
                    ascending: bool = ...) -> Any:
        ...

    def take(self, indices: Any, axis: int = ..., allow_fill: bool = ...,
             fill_value: Optional[Any] = ..., **kwargs: Any) -> Any:
        ...

    @property
    def asobject(self) -> Any:
        ...

    def tolist(self) -> Any:
        ...

    def min(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any,
            **kwargs: Any) -> Any:
        ...

    def argmin(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any,
               **kwargs: Any) -> Any:
        ...

    def max(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any,
            **kwargs: Any) -> Any:
        ...

    def argmax(self, axis: Optional[Any] = ..., skipna: bool = ..., *args: Any,
               **kwargs: Any) -> Any:
        ...

    def isin(self, values: Any, level: Optional[Any] = ...) -> Any:
        ...

    def intersection(self, other: Any, sort: bool = ...) -> Any:
        ...

    def repeat(self, repeats: Any, axis: Optional[Any] = ...) -> Any:
        ...

    def where(self, cond: Any, other: Optional[Any] = ...) -> Any:
        ...

    def astype(self, dtype: Any, copy: bool = ...) -> Any:
        ...

    def shift(self, periods: Any, freq: Optional[Any] = ...) -> Any:
        ...


def wrap_arithmetic_op(self: Any, other: Any, result: Any) -> Any:
    ...

def maybe_unwrap_index(obj: Any) -> Any:
    ...


class DatetimelikeDelegateMixin(PandasDelegate):
    name: Any = ...
