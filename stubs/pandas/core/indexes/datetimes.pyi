# Stubs for pandas.core.indexes.datetimes (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-import,unused-argument,invalid-name,redefined-builtin
# pylint: disable=too-few-public-methods,no-self-use,function-redefined
# pylint: disable=redefined-outer-name,too-many-ancestors,super-init-not-called
# pylint: disable=too-many-arguments

from pandas._libs.tslibs import Timestamp as Timestamp

from pandas.core.indexes.datetimelike import (
    DatetimeIndexOpsMixin,
    DatetimelikeDelegateMixin,
)
from pandas.core.indexes.numeric import Int64Index as Int64Index
from typing import Any, Optional

class DatetimeDelegateMixin(DatetimelikeDelegateMixin):
        ...


class DatetimeIndex(DatetimeIndexOpsMixin, Int64Index, DatetimeDelegateMixin):  # type: ignore
    __iter__: Any = ...

    def __new__(cls, data: Optional[Any] = ..., freq: Optional[Any] = ...,
                start: Optional[Any] = ..., end: Optional[Any] = ...,
                periods: Optional[Any] = ..., tz: Optional[Any] = ...,
                normalize: bool = ..., closed: Optional[Any] = ...,
                ambiguous: str = ..., dayfirst: bool = ...,
                yearfirst: bool = ..., dtype: Optional[Any] = ...,
                copy: bool = ..., name: Optional[Any] = ...,
                verify_integrity: Optional[Any] = ...) -> Any:
        ...

    def __array__(self, dtype: Optional[Any] = ...) -> Any:
        ...

    @property
    def dtype(self) -> Any:
        ...

    @property
    def tz(self) -> Any:
        ...

    @tz.setter
    def tz(self, value: Any) -> None:
        ...

    tzinfo: Any = ...
    def __reduce__(self) -> Any:
        ...

    def union_many(self, others: Any) -> Any:
        ...

    def intersection(self, other: Any, sort: bool = ...) -> Any:
        ...

    def to_series(self, keep_tz: Optional[Any] = ..., index: Optional[Any] = ..., name: Optional[Any] = ...) -> Any:  # type: ignore
        ...

    def snap(self, freq: str = ...) -> Any:
        ...

    def join(self, other: Any, how: str = ..., level: Optional[Any] = ...,
             return_indexers: bool = ..., sort: bool = ...) -> Any:
        ...

    def get_value(self, series: Any, key: Any) -> Any:
        ...

    def get_value_maybe_box(self, series: Any, key: Any) -> Any:
        ...

    def get_loc(self, key: Any, method: Optional[Any] = ...,
                tolerance: Optional[Any] = ...) -> Any:
        ...

    def slice_indexer(self, start: Optional[Any] = ...,
                      end: Optional[Any] = ..., step: Optional[Any] = ...,
                      kind: Optional[Any] = ...) -> Any:
        ...

    is_normalized: Any = ...
    strftime: Any = ...

    @property
    def offset(self) -> Any:
        ...

    @offset.setter
    def offset(self, value: Any) -> None:
        ...

    def __getitem__(self, key: Any) -> Any:
        ...

    def searchsorted(self, value: Any, side: str = ...,
                     sorter: Optional[Any] = ...) -> Any:
        ...

    def is_type_compatible(self, typ: Any) -> Any:
        ...

    @property
    def inferred_type(self) -> Any:
        ...

    @property
    def is_all_dates(self) -> Any:
        ...

    def insert(self, loc: Any, item: Any) -> Any:
        ...

    def delete(self, loc: Any) -> Any:
        ...

    def indexer_at_time(self, time: Any, asof: bool = ...) -> Any:
        ...

    def indexer_between_time(self, start_time: Any, end_time: Any,
                             include_start: bool = ...,
                             include_end: bool = ...) -> Any:
        ...


def date_range(
        start: Optional[Any] = ..., end: Optional[Any] = ...,
        periods: Optional[Any] = ..., freq: Optional[Any] = ...,
        tz: Optional[Any] = ..., normalize: bool = ...,
        name: Optional[Any] = ..., closed: Optional[Any] = ...,
        **kwargs: Any) -> Any:
    ...


def bdate_range(
        start: Optional[Any] = ..., end: Optional[Any] = ...,
        periods: Optional[Any] = ..., freq: str = ..., tz: Optional[Any] = ...,
        normalize: bool = ..., name: Optional[Any] = ...,
        weekmask: Optional[Any] = ..., holidays: Optional[Any] = ...,
        closed: Optional[Any] = ..., **kwargs: Any) -> Any:
    ...
