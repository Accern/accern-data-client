# Stubs for pandas.tests.frame.test_apply (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level


from typing import Any

def int_frame_const_col() -> Any:
    ...


class TestDataFrameApply:
    def test_apply(self, float_frame: Any) -> None:
        ...

    def test_apply_mixed_datetimelike(self) -> None:
        ...

    def test_apply_empty(self, float_frame: Any) -> None:
        ...

    def test_apply_with_reduce_empty(self) -> None:
        ...

    def test_apply_deprecate_reduce(self) -> None:
        ...

    def test_apply_standard_nonunique(self):
        ...

    def test_apply_with_string_funcs(
            self, float_frame: Any, func: Any, args: Any, kwds: Any) -> None:
        ...

    def test_apply_broadcast_deprecated(self, float_frame: Any) -> None:
        ...

    def test_apply_broadcast(
            self, float_frame: Any, int_frame_const_col: Any) -> None:
        ...

    def test_apply_broadcast_error(self, int_frame_const_col: Any) -> None:
        ...

    def test_apply_raw(self, float_frame: Any) -> None:
        ...

    def test_apply_axis1(self, float_frame: Any) -> None:
        ...

    def test_apply_ignore_failures(self, float_string_frame: Any) -> None:
        ...

    def test_apply_mixed_dtype_corner(self) -> None:
        ...

    def test_apply_empty_infer_type(self) -> None:
        ...

    def test_apply_with_args_kwds(self, float_frame: Any) -> None:
        ...

    def test_apply_yield_list(self, float_frame: Any) -> None:
        ...

    def test_apply_reduce_Series(self, float_frame: Any) -> None:
        ...

    def test_apply_reduce_rows_to_dict(self) -> None:
        ...

    def test_apply_differently_indexed(self) -> None:
        ...

    def test_apply_modify_traceback(self):
        ...

    def test_apply_bug(self):
        ...

    def test_apply_convert_objects(self):
        ...

    def test_apply_attach_name(self, float_frame: Any) -> None:
        ...

    def test_apply_multi_index(self, float_frame: Any) -> None:
        ...

    def test_apply_dict(self) -> None:
        ...

    def test_applymap(self, float_frame: Any) -> None:
        ...

    def test_applymap_box_timestamps(self) -> None:
        ...

    def test_applymap_box(self) -> None:
        ...

    def test_frame_apply_dont_convert_datetime64(self) -> None:
        ...

    def test_apply_non_numpy_dtype(self) -> None:
        ...

    def test_apply_dup_names_multi_agg(self) -> None:
        ...


class TestInferOutputShape:
    def test_infer_row_shape(self) -> None:
        ...

    def test_with_dictlike_columns(self) -> None:
        ...

    def test_with_dictlike_columns_with_infer(self) -> None:
        ...

    def test_with_listlike_columns(self) -> None:
        ...

    def test_infer_output_shape_columns(self) -> None:
        ...

    def test_infer_output_shape_listlike_columns(self) -> None:
        ...

    def test_consistent_coerce_for_shapes(self) -> None:
        ...

    def test_consistent_names(self, int_frame_const_col: Any) -> None:
        ...

    def test_result_type(self, int_frame_const_col: Any) -> None:
        ...

    def test_result_type_error(
            self, result_type: Any, int_frame_const_col: Any) -> None:
        ...

    def test_consistency_for_boxed(
            self, box: Any, int_frame_const_col: Any) -> None:
        ...


def zip_frames(frames: Any, axis: int = ...) -> Any:
    ...


class TestDataFrameAggregate:
    def test_agg_transform(self, axis: Any, float_frame: Any) -> None:
        ...

    def test_transform_and_agg_err(self, axis: Any, float_frame: Any) -> None:
        ...

    def test_transform_method_name(self, method: Any) -> None:
        ...

    def test_demo(self) -> None:
        ...

    def test_agg_multiple_mixed_no_warning(self) -> None:
        ...

    def test_agg_dict_nested_renaming_depr(self) -> None:
        ...

    def test_agg_reduce(self, axis: Any, float_frame: Any) -> None:
        ...

    def test_nuiscance_columns(self) -> None:
        ...

    def test_non_callable_aggregates(self) -> None:
        ...

    def test_agg_cython_table(
            self, df: Any, func: Any, expected: Any, axis: Any) -> None:
        ...

    def test_agg_cython_table_transform(
            self, df: Any, func: Any, expected: Any, axis: Any) -> None:
        ...

    def test_agg_cython_table_raises(
            self, df: Any, func: Any, expected: Any, axis: Any) -> None:
        ...

    def test_frequency_is_original(self, num_cols: Any) -> None:
        ...
