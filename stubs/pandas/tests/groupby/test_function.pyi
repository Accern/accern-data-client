# Stubs for pandas.tests.groupby.test_function (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,blacklisted-name

from typing import Any

def test_groupby_bool_aggs(agg_func: Any, skipna: Any, vals: Any) -> None:
    ...


def test_max_min_non_numeric() -> None:
    ...


def test_intercept_builtin_sum() -> None:
    ...


def test_builtins_apply(keys: Any, f: Any) -> None:
    ...


def test_arg_passthru() -> None:
    ...


def test_non_cython_api() -> None:
    ...


def test_cython_api2() -> None:
    ...


def test_cython_median() -> None:
    ...


def test_median_empty_bins(observed: Any) -> None:
    ...


def test_groupby_non_arithmetic_agg_types(
        dtype: Any, method: Any, data: Any) -> None:
    ...


def test_groupby_non_arithmetic_agg_int_like_precision(i: Any) -> None:
    ...


def test_idxmin_idxmax_returns_int_types(func: Any, values: Any) -> None:
    ...


def test_fill_consistency() -> None:
    ...


def test_groupby_cumprod() -> None:
    ...


def scipy_sem(*args: Any, **kwargs: Any) -> Any:
    ...


def test_ops_general(op: Any, targop: Any) -> None:
    ...


def test_max_nan_bug() -> None:
    ...


def test_nlargest() -> None:
    ...


def test_nsmallest() -> None:
    ...


def test_numpy_compat(func: Any) -> None:
    ...


def test_cummin_cummax():
    ...


def test_is_monotonic_increasing(in_vals: Any, out_vals: Any) -> None:
    ...


def test_is_monotonic_decreasing(in_vals: Any, out_vals: Any) -> None:
    ...


def test_apply_describe_bug(mframe: Any) -> None:
    ...


def test_series_describe_multikey() -> None:
    ...


def test_series_describe_single() -> None:
    ...


def test_series_index_name(df: Any) -> None:
    ...


def test_frame_describe_multikey(tsframe: Any) -> None:
    ...


def test_frame_describe_tupleindex() -> None:
    ...


def test_frame_describe_unstacked_format() -> None:
    ...


def test_series_groupby_nunique(
        n: Any, m: Any, sort: Any, dropna: Any) -> None:
    ...


def test_nunique() -> None:
    ...


def test_nunique_with_object() -> None:
    ...


def test_nunique_with_empty_series() -> None:
    ...


def test_nunique_with_timegrouper() -> None:
    ...


def test_nunique_preserves_column_level_names() -> None:
    ...


def test_groupby_timedelta_cython_count() -> None:
    ...


def test_count() -> None:
    ...


def test_count_non_nulls() -> None:
    ...


def test_count_object() -> None:
    ...


def test_count_cross_type() -> None:
    ...


def test_lower_int_prec_count() -> None:
    ...


def test_count_uses_size_on_exception() -> None:
    ...


def test_size(df: Any) -> None:
    ...


def test_size_groupby_all_null() -> None:
    ...


def test_quantile(
        interpolation: Any, a_vals: Any, b_vals: Any, q: Any) -> None:
    ...


def test_quantile_raises() -> None:
    ...


def test_pipe():
    ...


def test_pipe_args():
    ...


def test_groupby_mean_no_overflow() -> None:
    ...
