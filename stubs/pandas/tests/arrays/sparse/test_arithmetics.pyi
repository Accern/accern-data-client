# Stubs for pandas.tests.arrays.sparse.test_arithmetics (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,import-error

from typing import Any

def kind(request: Any) -> Any:
    ...

def mix(request: Any) -> Any:
    ...


class TestSparseArrayArithmetics:
    def test_float_scalar(self, kind: Any, mix: Any, all_arithmetic_functions: Any, fill_value: Any, scalar: Any) -> None:
        ...

    def test_float_scalar_comparison(self, kind: Any) -> None:
        ...

    def test_float_same_index(self, kind: Any, mix: Any, all_arithmetic_functions: Any) -> None:
        ...

    def test_float_same_index_comparison(self, kind: Any) -> None:
        ...

    def test_float_array(self, kind: Any, mix: Any, all_arithmetic_functions: Any) -> None:
        ...

    def test_float_array_different_kind(self, mix: Any, all_arithmetic_functions: Any) -> None:
        ...

    def test_float_array_comparison(self, kind: Any) -> None:
        ...

    def test_int_array(self, kind: Any, mix: Any, all_arithmetic_functions: Any) -> None:
        ...

    def test_int_array_comparison(self, kind: Any) -> None:
        ...

    def test_bool_same_index(self, kind: Any, fill_value: Any) -> None:
        ...

    def test_bool_array_logical(self, kind: Any, fill_value: Any) -> None:
        ...

    def test_mixed_array_float_int(self, kind: Any, mix: Any, all_arithmetic_functions: Any) -> None:
        ...

    def test_mixed_array_comparison(self, kind: Any) -> None:
        ...


class TestSparseSeriesArithmetic(TestSparseArrayArithmetics):
    def test_alignment(self, mix: Any, all_arithmetic_functions: Any) -> None:
        ...


def test_with_list(op: Any) -> None:
    ...

def test_ufuncs(ufunc: Any, arr: Any) -> None:
    ...

def test_binary_ufuncs(ufunc: Any, a: Any, b: Any) -> None:
    ...

def test_ndarray_inplace() -> None:
    ...

def test_sparray_inplace() -> None:
    ...

def test_invert(fill_value: Any) -> None:
    ...

def test_unary_op(op: Any, fill_value: Any) -> None:
    ...
