# Stubs for pandas.tests.series.test_apply (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method

from typing import Any

class TestSeriesApply:
    def test_apply(self, datetime_series: Any) -> None:
        ...

    def test_apply_same_length_inference_bug(self) -> None:
        ...

    def test_apply_dont_convert_dtype(self) -> None:
        ...

    def test_with_string_args(self, datetime_series: Any) -> None:
        ...

    def test_apply_args(self) -> None:
        ...

    def test_series_map_box_timestamps(self) -> None:
        ...

    def test_apply_box(self) -> None:
        ...

    def test_apply_datetimetz(self) -> None:
        ...

    def test_apply_dict_depr(self) -> None:
        ...

    def test_apply_categorical_with_nan_values(self, series: Any) -> None:
        ...


class TestSeriesAggregate:
    def test_transform(self, string_series: Any) -> None:
        ...

    def test_transform_and_agg_error(self, string_series: Any) -> None:
        ...

    def test_demo(self) -> None:
        ...

    def test_multiple_aggregators_with_dict_api(self) -> None:
        ...

    def test_agg_apply_evaluate_lambdas_the_same(self, string_series: Any) -> None:
        ...

    def test_with_nested_series(self, datetime_series: Any) -> None:
        ...

    def test_replicate_describe(self, string_series: Any) -> None:
        ...

    def test_reduce(self, string_series: Any) -> None:
        ...

    def test_non_callable_aggregates(self) -> None:
        ...

    def test_agg_cython_table(self, series: Any, func: Any, expected: Any) -> None:
        ...

    def test_agg_cython_table_transform(self, series: Any, func: Any, expected: Any) -> None:
        ...

    def test_agg_cython_table_raises(self, series: Any, func: Any, expected: Any) -> None:
        ...


class TestSeriesMap:
    def test_map(self, datetime_series: Any) -> None:
        ...

    def test_map_empty(self, index: Any) -> None:
        ...

    def test_map_compat(self) -> None:
        ...

    def test_map_int(self) -> None:
        ...

    def test_map_type_inference(self) -> None:
        ...

    def test_map_decimal(self, string_series: Any) -> None:
        ...

    def test_map_na_exclusion(self) -> None:
        ...

    def test_map_dict_with_tuple_keys(self) -> None:
        ...

    def test_map_counter(self) -> None:
        ...

    def test_map_defaultdict(self) -> None:
        ...

    def test_map_dict_subclass_with_missing(self) -> None:
        ...

    def test_map_dict_subclass_without_missing(self) -> None:
        ...

    def test_map_box(self) -> None:
        ...

    def test_map_categorical(self) -> None:
        ...

    def test_map_datetimetz(self) -> None:
        ...

    def test_map_missing_mixed(self, vals: Any, mapping: Any, exp: Any) -> None:
        ...

    def test_apply_series_on_date_time_index_aware_series(self, dti: Any, exp: Any) -> None:
        ...

    def test_apply_scaler_on_date_time_index_aware_series(self) -> None:
        ...
