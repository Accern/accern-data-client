# Stubs for pandas.tests.series.test_operators (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin

from typing import Any
from .common import TestData


class TestSeriesLogicalOps:
    def test_bool_operators_with_nas(self, bool_op: Any) -> None:
        ...

    def test_operators_bitwise(self) -> None:
        ...

    def test_scalar_na_logical_ops_corners(self) -> None:
        ...

    def test_logical_ops_with_index(self, op: Any) -> None:
        ...

    def test_reversed_logical_ops_with_index(self, op: Any) -> None:
        ...

    def test_reverse_ops_with_index(self, op: Any, expected: Any) -> None:
        ...

    def test_logical_ops_label_based(self) -> None:
        ...

    def test_logical_ops_df_compat(self) -> None:
        ...


class TestSeriesComparisons:
    def test_comparisons(self) -> None:
        ...

    def test_categorical_comparisons(self) -> None:
        ...

    def test_comparison_tuples(self) -> None:
        ...

    def test_comparison_operators_with_nas(self) -> None:
        ...

    def test_unequal_categorical_comparison_raises_type_error(self) -> None:
        ...

    def test_ne(self) -> None:
        ...

    def test_comp_ops_df_compat(self) -> None:
        ...

    def test_compare_series_interval_keyword(self) -> None:
        ...


class TestSeriesFlexComparisonOps:
    def test_comparison_flex_alignment(self) -> None:
        ...

    def test_comparison_flex_alignment_fill(self) -> None:
        ...


class TestSeriesOperators(TestData):
    def test_operators_empty_int_corner(self) -> None:
        ...

    def test_ops_datetimelike_align(self) -> None:
        ...

    def test_operators_corner(self) -> None:
        ...

    pairings: Any = ...
    fv: int = ...
    lop: Any = ...
    lequiv: Any = ...
    rop: Any = ...
    requiv: Any = ...
    def test_operators_combine(self, op: Any, equiv_op: Any, fv: Any) -> None:
        ...

    def test_operators_na_handling(self) -> None:
        ...

    def test_op_duplicate_index(self) -> None:
        ...

    def test_divmod(self) -> None:
        ...


class TestSeriesUnaryOps:
    def test_neg(self) -> None:
        ...

    def test_invert(self) -> None:
        ...
