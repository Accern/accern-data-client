# Stubs for pandas.tests.dtypes.test_dtypes (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,no-self-use,invalid-name

from typing import Any

class Base:
    dtype: Any = ...

    def setup_method(self, method: Any) -> None:
        ...

    def test_hash(self) -> None:
        ...

    def test_equality_invalid(self) -> None:
        ...

    def test_numpy_informed(self) -> None:
        ...

    def test_pickle(self) -> None:
        ...


class TestCategoricalDtype(Base):
    def create(self):
        ...

    def test_pickle(self) -> None:
        ...

    def test_hash_vs_equality(self) -> None:
        ...

    def test_equality(self) -> None:
        ...

    def test_construction_from_string(self) -> None:
        ...

    def test_constructor_invalid(self) -> None:
        ...

    dtype1: Any = ...
    dtype2: Any = ...
    c: Any = ...

    def test_from_values_or_dtype(self, values: Any, categories: Any,
                                  ordered: Any, dtype: Any,
                                  expected: Any) -> None:
        ...

    def test_from_values_or_dtype_raises(self, values: Any, categories: Any,
                                         ordered: Any, dtype: Any) -> None:
        ...

    def test_is_dtype(self) -> None:
        ...

    def test_basic(self) -> None:
        ...

    def test_tuple_categories(self) -> None:
        ...

    def test_is_boolean(self, categories: Any, expected: Any) -> None:
        ...


class TestDatetimeTZDtype(Base):
    def create(self):
        ...

    def test_alias_to_unit_raises(self) -> None:
        ...

    def test_alias_to_unit_bad_alias_raises(self) -> None:
        ...

    def test_hash_vs_equality(self) -> None:
        ...

    def test_construction(self) -> None:
        ...

    def test_subclass(self) -> None:
        ...

    def test_compat(self) -> None:
        ...

    def test_construction_from_string(self) -> None:
        ...

    def test_construct_from_string_raises(self) -> None:
        ...

    def test_is_dtype(self) -> None:
        ...

    def test_equality(self) -> None:
        ...

    def test_basic(self) -> None:
        ...

    def test_dst(self) -> None:
        ...

    def test_parser(self, tz: Any, constructor: Any) -> None:
        ...

    def test_empty(self) -> None:
        ...

    def test_tz_standardize(self) -> None:
        ...


class TestPeriodDtype(Base):
    def create(self):
        ...

    def test_hash_vs_equality(self) -> None:
        ...

    def test_construction(self) -> None:
        ...

    def test_subclass(self) -> None:
        ...

    def test_identity(self) -> None:
        ...

    def test_compat(self) -> None:
        ...

    def test_construction_from_string(self) -> None:
        ...

    def test_is_dtype(self) -> None:
        ...

    def test_equality(self) -> None:
        ...

    def test_basic(self) -> None:
        ...

    def test_empty(self) -> None:
        ...

    def test_not_string(self) -> None:
        ...


class TestIntervalDtype(Base):
    def create(self):
        ...

    def test_hash_vs_equality(self) -> None:
        ...

    def test_construction(self, subtype: Any) -> None:
        ...

    def test_construction_generic(self, subtype: Any) -> None:
        ...

    def test_construction_not_supported(self, subtype: Any) -> None:
        ...

    def test_construction_errors(self, subtype: Any) -> None:
        ...

    def test_construction_from_string(self) -> None:
        ...

    def test_construction_from_string_errors(self, string: Any) -> None:
        ...

    def test_construction_from_string_error_subtype(self, string: Any) -> None:
        ...

    def test_subclass(self) -> None:
        ...

    def test_is_dtype(self) -> None:
        ...

    def test_equality(self) -> None:
        ...

    def test_equality_generic(self, subtype: Any) -> None:
        ...

    def test_name_repr(self, subtype: Any) -> None:
        ...

    def test_name_repr_generic(self, subtype: Any) -> None:
        ...

    def test_basic(self) -> None:
        ...

    def test_basic_dtype(self) -> None:
        ...

    def test_caching(self) -> None:
        ...


class TestCategoricalDtypeParametrized:
    def test_basic(self, categories: Any, ordered_fixture: Any) -> None:
        ...

    def test_order_matters(self) -> None:
        ...

    def test_unordered_same(self, ordered: Any) -> None:
        ...

    def test_categories(self) -> None:
        ...

    def test_equal_but_different(self, ordered_fixture: Any) -> None:
        ...

    def test_order_hashes_different(self, v1: Any, v2: Any) -> None:
        ...

    def test_nan_invalid(self) -> None:
        ...

    def test_non_unique_invalid(self) -> None:
        ...

    def test_same_categories_different_order(self) -> None:
        ...

    def test_categorical_equality(self, ordered1: Any, ordered2: Any) -> None:
        ...

    def test_categorical_equality_strings(self, categories: Any,
                                          ordered_fixture: Any,
                                          other: Any) -> None:
        ...

    def test_invalid_raises(self) -> None:
        ...

    def test_mixed(self) -> None:
        ...

    def test_from_categorical_dtype_identity(self) -> None:
        ...

    def test_from_categorical_dtype_categories(self) -> None:
        ...

    def test_from_categorical_dtype_ordered(self) -> None:
        ...

    def test_from_categorical_dtype_both(self) -> None:
        ...

    def test_str_vs_repr(self, ordered_fixture: Any) -> None:
        ...

    def test_categorical_categories(self) -> None:
        ...

    def test_update_dtype(self, ordered_fixture: Any,
                          new_categories: Any, new_ordered: Any) -> None:
        ...

    def test_update_dtype_string(self, ordered_fixture: Any) -> None:
        ...

    def test_update_dtype_errors(self, bad_dtype: Any) -> None:
        ...

    def test_ordered_none_default_deprecated(self, ordered: Any) -> None:
        ...

    def test_pickle_ordered_from_sentinel(self, ordered: Any) -> None:
        ...


def test_registry(dtype: Any) -> None:
    ...


def test_registry_find(dtype: Any, expected: Any) -> None:
    ...


def test_is_bool_dtype(dtype: Any, expected: Any) -> None:
    ...


def test_is_bool_dtype_sparse() -> None:
    ...


def test_is_dtype_no_warning(check: Any) -> None:
    ...
