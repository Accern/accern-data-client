# Stubs for pandas.tests.tseries.offsets.test_yqm_offsets (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,too-many-ancestors

from typing import Any
from .test_offsets import Base

def test_quarterly_dont_normalize() -> None:
    ...


def test_apply_index(cls: Any, n: Any) -> None:
    ...


def test_on_offset(offset: Any) -> None:
    ...


class TestMonthBegin(Base):
    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...


class TestMonthEnd(Base):
    def test_day_of_month(self) -> None:
        ...

    def test_normalize(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...


class TestBMonthBegin(Base):
    def test_offsets_compare_equal(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...


class TestBMonthEnd(Base):
    def test_normalize(self) -> None:
        ...

    def test_offsets_compare_equal(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...


class TestQuarterBegin(Base):
    def test_repr(self) -> None:
        ...

    def test_isAnchored(self) -> None:
        ...

    def test_offset_corner_case(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...


class TestQuarterEnd(Base):
    def test_repr(self) -> None:
        ...

    def test_isAnchored(self) -> None:
        ...

    def test_offset_corner_case(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...


class TestBQuarterBegin(Base):
    def test_repr(self) -> None:
        ...

    def test_isAnchored(self) -> None:
        ...

    def test_offset_corner_case(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...


class TestBQuarterEnd(Base):
    def test_repr(self) -> None:
        ...

    def test_isAnchored(self) -> None:
        ...

    def test_offset_corner_case(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...


class TestYearBegin(Base):
    def test_misspecified(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...


class TestYearEnd(Base):
    def test_misspecified(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...


class TestYearEndDiffMonth(Base):
    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...


class TestBYearBegin(Base):
    def test_misspecified(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...


class TestBYearEnd(Base):
    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...


class TestBYearEndLagged(Base):
    def test_bad_month_fail(self) -> None:
        ...

    offset_cases: Any = ...
    def test_offset(self, case: Any) -> None:
        ...

    def test_roll(self) -> None:
        ...

    on_offset_cases: Any = ...
    def test_onOffset(self, case: Any) -> None:
        ...
