# Stubs for pandas.tests.indexes.test_range (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level

from typing import Any
from pandas import Float64Index, Index, Int64Index, RangeIndex
from .test_numeric import Numeric

RI = RangeIndex
I64 = Int64Index
F64 = Float64Index
OI = Index

class TestRangeIndex(Numeric):
    indices: Any = ...
    def setup_method(self, method: Any) -> None:
        ...

    def create_index(self):
        ...

    def test_can_hold_identifiers(self) -> None:
        ...

    def test_too_many_names(self) -> None:
        ...

    def test_constructor(
            self, args: Any, kwargs: Any, start: Any, stop: Any, step: Any,
            name: Any) -> None:
        ...

    def test_constructor_invalid_args(self) -> None:
        ...

    def test_constructor_same(self) -> None:
        ...

    def test_constructor_range(self) -> None:
        ...

    def test_constructor_name(self) -> None:
        ...

    def test_constructor_corner(self) -> None:
        ...

    def test_start_stop_step_attrs(
            self, index: Any, start: Any, stop: Any, step: Any) -> None:
        ...

    def test_deprecated_start_stop_step_attrs(self, attr_name: Any) -> None:
        ...

    def test_copy(self) -> None:
        ...

    def test_repr(self) -> None:
        ...

    def test_insert(self) -> None:
        ...

    def test_delete(self) -> None:
        ...

    def test_view(self) -> None:
        ...

    def test_dtype(self) -> None:
        ...

    def test_cached_data(self) -> None:
        ...

    def test_is_monotonic(self) -> None:
        ...

    def test_equals_range(self) -> None:
        ...

    def test_logical_compat(self) -> None:
        ...

    def test_identical(self) -> None:
        ...

    def test_get_indexer(self) -> None:
        ...

    def test_get_indexer_pad(self) -> None:
        ...

    def test_get_indexer_backfill(self) -> None:
        ...

    def test_join_outer(self) -> None:
        ...

    def test_join_inner(self) -> None:
        ...

    def test_join_left(self) -> None:
        ...

    def test_join_right(self) -> None:
        ...

    def test_join_non_int_index(self) -> None:
        ...

    def test_join_non_unique(self) -> None:
        ...

    def test_join_self(self) -> None:
        ...

    def test_intersection(self, sort: Any) -> None:
        ...

    def test_union_noncomparable(self, sort: Any) -> None:
        ...

    def unions(self, request: Any) -> Any:
        ...

    def test_union_sorted(self, unions: Any) -> None:
        ...

    def test_nbytes(self) -> None:
        ...

    def test_cant_or_shouldnt_cast(self) -> None:
        ...

    def test_view_Index(self) -> None:
        ...

    def test_prevent_casting(self) -> None:
        ...

    def test_take_preserve_name(self) -> None:
        ...

    def test_take_fill_value(self) -> None:
        ...

    def test_print_unicode_columns(self) -> None:
        ...

    def test_repr_roundtrip(self) -> None:
        ...

    def test_slice_keep_name(self) -> None:
        ...

    def test_explicit_conversions(self) -> None:
        ...

    def test_has_duplicates(self) -> None:
        ...

    def test_extended_gcd(self) -> None:
        ...

    def test_min_fitting_element(self) -> None:
        ...

    def test_max_fitting_element(self) -> None:
        ...

    def test_pickle_compat_construction(self) -> None:
        ...

    def test_slice_specialised(self) -> None:
        ...

    def test_len_specialised(self) -> None:
        ...

    def appends(self, request: Any) -> Any:
        ...

    def test_append(self, appends: Any) -> None:
        ...

    def test_engineless_lookup(self) -> None:
        ...
