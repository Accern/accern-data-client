# Stubs for pandas.tests.indexes.interval.test_interval (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ

from typing import Any
from pandas.tests.indexes.common import Base

def name(request: Any) -> Any:
    ...


class TestIntervalIndex(Base):
    index: Any = ...
    index_with_nan: Any = ...
    indices: Any = ...
    def setup_method(self, method: Any) -> None:
        ...

    def create_index(self, closed: str = ...) -> Any:
        ...

    def create_index_with_nan(self, closed: str = ...) -> Any:
        ...

    def test_properties(self, closed: Any) -> None:
        ...

    def test_length(self, closed: Any, breaks: Any) -> None:
        ...

    def test_with_nans(self, closed: Any) -> None:
        ...

    def test_copy(self, closed: Any) -> None:
        ...

    def test_ensure_copied_data(self, closed: Any) -> None:  # type: ignore
        ...

    def test_equals(self, closed: Any) -> None:  # type: ignore
        ...

    def test_where(self, closed: Any, klass: Any) -> None:  # type: ignore
        ...

    def test_delete(self, closed: Any) -> None:
        ...

    def test_insert(self, data: Any) -> None:
        ...

    def test_take(self, closed: Any) -> None:  # type: ignore
        ...

    def test_is_unique_interval(self, closed: Any) -> None:
        ...

    def test_monotonic(self, closed: Any) -> None:
        ...

    def test_repr(self) -> None:
        ...

    def test_repr_max_seq_item_setting(self) -> None:
        ...

    def test_repr_roundtrip(self) -> None:
        ...

    def test_frame_repr(self) -> None:
        ...

    def test_repr_missing(self, constructor: Any, expected: Any) -> None:
        ...

    def test_get_item(self, closed: Any) -> None:
        ...

    def test_get_loc_length_one_scalar(self, scalar: Any, closed: Any) -> None:
        ...

    def test_get_loc_length_one_interval(self, left: Any, right: Any, closed: Any, other_closed: Any) -> None:
        ...

    def test_get_loc_datetimelike_nonoverlapping(self, breaks: Any) -> None:
        ...

    def test_get_loc_datetimelike_overlapping(self, arrays: Any) -> None:
        ...

    def test_get_loc_decreasing(self, values: Any) -> None:
        ...

    def test_get_indexer_length_one(self, item: Any, closed: Any) -> None:
        ...

    def test_get_indexer_length_one_interval(self, size: Any, closed: Any) -> None:
        ...

    def test_maybe_convert_i8(self, breaks: Any) -> None:
        ...

    def test_maybe_convert_i8_nat(self, breaks: Any) -> None:
        ...

    def test_maybe_convert_i8_numeric(self, breaks: Any, make_key: Any) -> None:
        ...

    def test_maybe_convert_i8_errors(self, breaks1: Any, breaks2: Any, make_key: Any) -> None:
        ...

    def test_contains_method(self) -> None:
        ...

    def test_dropna(self, closed: Any) -> None:
        ...

    def test_non_contiguous(self, closed: Any) -> None:
        ...

    def test_isin(self, closed: Any) -> None:
        ...

    def test_comparison(self) -> None:
        ...

    def test_missing_values(self, closed: Any) -> None:
        ...

    def test_sort_values(self, closed: Any) -> None:
        ...

    def test_datetime(self, tz: Any) -> None:
        ...

    def test_append(self, closed: Any) -> None:
        ...

    def test_is_non_overlapping_monotonic(self, closed: Any) -> None:
        ...

    def test_is_overlapping(self, start: Any, shift: Any, na_value: Any, closed: Any) -> None:
        ...

    def test_to_tuples(self, tuples: Any) -> None:
        ...

    def test_to_tuples_na(self, tuples: Any, na_tuple: Any) -> None:
        ...

    def test_nbytes(self) -> None:
        ...

    def test_itemsize(self) -> None:
        ...

    def test_set_closed(self, name: Any, closed: Any, new_closed: Any) -> None:
        ...

    def test_set_closed_errors(self, bad_closed: Any) -> None:
        ...

    def test_is_all_dates(self) -> None:
        ...
