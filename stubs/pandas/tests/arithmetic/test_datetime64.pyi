# Stubs for pandas.tests.arithmetic.test_datetime64 (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,import-error

from datetime import datetime
from typing import Any


def assert_all(obj: Any) -> None:
    ...


class TestDatetime64ArrayLikeComparisons:
    def test_compare_zerodim(self, tz_naive_fixture: Any,
                             box_with_array: Any) -> None:
        ...


class TestDatetime64DataFrameComparison:
    def test_tz_aware_scalar_comparison(self, timestamps: Any) -> None:
        ...

    def test_dt64_nat_comparison(self) -> None:
        ...


class TestDatetime64SeriesComparison:
    def test_nat_comparisons(self, dtype: Any, box: Any, reverse: Any,
                             pair: Any) -> None:
        ...

    def test_comparison_invalid(self, box_with_array: Any) -> None:
        ...

    def test_nat_comparisons_scalar(self, dtype: Any, data: Any,
                                    box_with_array: Any) -> None:
        ...

    def test_series_comparison_scalars(self) -> None:
        ...

    def test_dt64_ser_cmp_date_warning(self) -> None:
        ...

    def test_dt64ser_cmp_date_invalid(self, box_with_array: Any) -> None:
        ...

    def test_timestamp_compare_series(self, left: Any, right: Any) -> None:
        ...

    def test_dt64arr_timestamp_equality(self, box_with_array: Any) -> None:
        ...

    def test_comparison_tzawareness_compat(self, op: Any) -> None:
        ...


class TestDatetimeIndexComparisons:
    def test_comparators(self, op: Any) -> None:
        ...

    def test_dti_cmp_datetimelike(self, other: Any,
                                  tz_naive_fixture: Any) -> None:
        ...

    def dt64arr_cmp_non_datetime(self, tz_naive_fixture: Any,
                                 box_with_array: Any) -> None:
        ...

    def test_dti_eq_null_scalar(self, other: Any,
                                tz_naive_fixture: Any) -> None:
        ...

    def test_dti_ne_null_scalar(self, other: Any,
                                tz_naive_fixture: Any) -> None:
        ...

    def test_dti_cmp_null_scalar_inequality(
            self, tz_naive_fixture: Any, other: Any,
            box_with_array: Any) -> None:
        ...

    def test_dti_cmp_nat(self, dtype: Any, box_with_array: Any) -> None:
        ...

    def test_dti_cmp_nat_behaves_like_float_cmp_nan(self) -> None:
        ...

    def test_comparison_tzawareness_compat(
            self, op: Any, box_df_fail: Any) -> None:
        ...

    def test_comparison_tzawareness_compat_scalars(
            self, op: Any, box_with_array: Any) -> None:
        ...

    def test_scalar_comparison_tzawareness(
            self, op: Any, other: Any, tz_aware_fixture: Any,
            box_with_array: Any) -> None:
        ...

    def test_nat_comparison_tzawareness(self, op: Any) -> None:
        ...

    def test_dti_cmp_str(self, tz_naive_fixture: Any) -> None:
        ...

    def test_dt64arr_cmp_scalar_invalid(
            self, other: Any, tz_naive_fixture: Any,
            box_with_array: Any) -> None:
        ...

    def test_dti_cmp_list(self) -> None:
        ...

    def test_dti_cmp_tdi_tzawareness(self, other: Any) -> None:
        ...

    def test_dti_cmp_object_dtype(self) -> None:
        ...


class TestDatetime64Arithmetic:
    def test_dt64arr_add_timedeltalike_scalar(
            self, tz_naive_fixture: Any, two_hours: Any,
            box_with_array: Any) -> None:
        ...

    def test_dt64arr_iadd_timedeltalike_scalar(
            self, tz_naive_fixture: Any, two_hours: Any,
            box_with_array: Any) -> None:
        ...

    def test_dt64arr_sub_timedeltalike_scalar(
            self, tz_naive_fixture: Any, two_hours: Any,
            box_with_array: Any) -> None:
        ...

    def test_dt64arr_isub_timedeltalike_scalar(
            self, tz_naive_fixture: Any, two_hours: Any,
            box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_td64_scalar(self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_sub_td64_nat(
            self, box_with_array: Any, tz_naive_fixture: Any) -> None:
        ...

    def test_dt64arr_add_sub_td64ndarray(
            self, tz_naive_fixture: Any, box_with_array: Any) -> None:
        ...

    def test_dt64arr_sub_dtscalar(
            self, box_with_array: Any, ts: Any) -> None:
        ...

    def test_dt64arr_sub_datetime64_not_ns(self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_sub_timestamp(self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_sub_NaT(self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_naive_sub_dt64ndarray(self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_aware_sub_dt64ndarray_raises(
            self, tz_aware_fixture: Any, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_dt64ndarray_raises(
            self, tz_naive_fixture: Any, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_timestamp_raises(self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_sub_float(
            self, other: Any, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_sub_parr(
            self, dti_freq: Any, pi_freq: Any, box_with_array: Any,
                box_with_array2: Any) -> None:
        ...

    def test_dt64arr_add_sub_period_scalar(
            self, dti_freq: Any, box_with_array: Any) -> None:
        ...


class TestDatetime64DateOffsetArithmetic:
    def test_dt64arr_series_add_tick_DateOffset(
            self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_series_sub_tick_DateOffset(
            self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_sub_tick_DateOffset_smoke(
            self, cls_name: Any, box_with_array: Any) -> None:
        ...

    def test_dti_add_tick_tzaware(
            self, tz_aware_fixture: Any, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_sub_relativedelta_offsets(
            self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_sub_DateOffsets(
            self, box_with_array: Any, n: Any, normalize: Any,
            cls_and_kwargs: Any) -> None:
        ...

    def test_dt64arr_add_sub_DateOffset(self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_mixed_offset_array(self, box_with_array: Any) -> None:
        ...

    def test_dt64arr_add_sub_offset_ndarray(
            self, tz_naive_fixture: Any, box_with_array: Any) -> None:
        ...

    def test_dti_add_sub_nonzero_mth_offset(
            self, op: Any, offset: Any, exp: Any, exp_freq: Any,
            tz_aware_fixture: Any, box_with_array: Any) -> None:
        ...


class TestDatetime64OverflowHandling:
    def test_dt64_overflow_masking(self, box_with_array: Any) -> None:
        ...

    def test_dt64_series_arith_overflow(self) -> None:
        ...

    def test_datetimeindex_sub_timestamp_overflow(self) -> None:
        ...

    def test_datetimeindex_sub_datetimeindex_overflow(self) -> None:
        ...


class TestTimestampSeriesArithmetic:
    def test_empty_series_add_sub(self) -> None:
        ...

    def test_operators_datetimelike(self) -> None:
        ...

    def test_dt64ser_sub_datetime_dtype(self) -> None:
        ...

    def test_operators_datetimelike_invalid(
            self, all_arithmetic_operators: Any) -> None:
        ...

    def test_sub_single_tz(self) -> None:
        ...

    def test_dt64tz_series_sub_dtitz(self) -> None:
        ...

    def test_sub_datetime_compat(self) -> None:
        ...

    def test_dt64_series_add_mixed_tick_DateOffset(self) -> None:
        ...

    def test_datetime64_ops_nat(self) -> None:
        ...

    def test_dt64_mul_div_numeric_invalid(
            self, one: Any, dt64_series: Any) -> None:
        ...

    def test_dt64_series_add_intlike(self, tz: Any, op: Any) -> None:
        ...

    def test_operators_datetimelike_with_timezones(self) -> None:
        ...


class TestDatetimeIndexArithmetic:
    def test_dti_add_int(self, tz_naive_fixture: Any, one: Any) -> None:
        ...

    def test_dti_iadd_int(self, tz_naive_fixture: Any, one: Any) -> None:
        ...

    def test_dti_sub_int(self, tz_naive_fixture: Any, one: Any) -> None:
        ...

    def test_dti_isub_int(self, tz_naive_fixture: Any, one: Any) -> None:
        ...

    def test_dti_add_intarray_tick(self, int_holder: Any, freq: Any) -> None:
        ...

    def test_dti_add_intarray_non_tick(
            self, int_holder: Any, freq: Any) -> None:
        ...

    def test_dti_add_intarray_no_freq(self, int_holder: Any) -> None:
        ...

    def test_dti_add_tdi(self, tz_naive_fixture: Any) -> None:
        ...

    def test_dti_iadd_tdi(self, tz_naive_fixture: Any) -> None:
        ...

    def test_dti_sub_tdi(self, tz_naive_fixture: Any) -> None:
        ...

    def test_dti_isub_tdi(self, tz_naive_fixture: Any) -> None:
        ...

    def test_add_datetimelike_and_dti(self, addend: Any, tz: Any) -> None:
        ...

    def test_sub_dti_dti(self) -> None:
        ...

    def test_timedelta64_equal_timedelta_supported_ops(self, op: Any) -> None:
        ...

    def test_ops_nat_mixed_datetime64_timedelta64(self) -> None:
        ...

    def test_ufunc_coercions(self) -> None:
        ...

    def test_dti_add_series(self, tz: Any, names: Any) -> None:
        ...

    def test_dti_add_offset_index(
            self, tz_naive_fixture: Any, names: Any) -> None:
        ...

    def test_dti_sub_offset_index(
            self, tz_naive_fixture: Any, names: Any) -> None:
        ...

    def test_dti_with_offset_series(
            self, tz_naive_fixture: Any, names: Any) -> None:
        ...


def test_shift_months(years: Any, months: Any) -> None:
    ...


class SubDatetime(datetime):
    ...


def test_dt_subclass_add_timedelta(lh: Any, rh: Any) -> None:
    ...
