# Stubs for pandas.tests.arithmetic.test_numeric (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level

from typing import Any

def adjust_negative_zero(zero: Any, expected: Any) -> Any:
    ...


class TestNumericComparisons:
    def test_operator_series_comparison_zerorank(self) -> None:
        ...

    def test_df_numeric_cmp_dt64_raises(self) -> None:
        ...

    def test_compare_invalid(self) -> None:
        ...


class TestNumericArraylikeArithmeticWithTimedeltaLike:
    def test_mul_td64arr(self, left: Any, box_cls: Any) -> None:
        ...

    def test_div_td64arr(self, left: Any, box_cls: Any) -> None:
        ...

    def test_ops_series(self) -> None:
        ...

    def test_numeric_arr_mul_tdscalar(
            self, scalar_td: Any, numeric_idx: Any, box: Any) -> None:
        ...

    def test_numeric_arr_rdiv_tdscalar(
            self, three_days: Any, numeric_idx: Any, box: Any) -> None:
        ...

    def test_add_sub_timedeltalike_invalid(
            self, numeric_idx: Any, other: Any, box: Any) -> None:
        ...


class TestDivisionByZero:
    def test_div_zero(self, zero: Any, numeric_idx: Any) -> None:
        ...

    def test_floordiv_zero(self, zero: Any, numeric_idx: Any) -> None:
        ...

    def test_mod_zero(self, zero: Any, numeric_idx: Any) -> None:
        ...

    def test_divmod_zero(self, zero: Any, numeric_idx: Any) -> None:
        ...

    def test_div_negative_zero(
            self, zero: Any, numeric_idx: Any, op: Any) -> None:
        ...

    def test_ser_div_ser(self, dtype1: Any, any_real_dtype: Any) -> None:
        ...

    def test_ser_divmod_zero(self, dtype1: Any, any_real_dtype: Any) -> None:
        ...

    def test_ser_divmod_inf(self) -> None:
        ...

    def test_rdiv_zero_compat(self) -> None:
        ...

    def test_div_zero_inf_signs(self) -> None:
        ...

    def test_rdiv_zero(self) -> None:
        ...

    def test_floordiv_div(self) -> None:
        ...

    def test_df_div_zero_df(self) -> None:
        ...

    def test_df_div_zero_array(self) -> None:
        ...

    def test_df_div_zero_int(self) -> None:
        ...

    def test_df_div_zero_series_does_not_commute(self) -> None:
        ...

    def test_df_mod_zero_df(self) -> None:
        ...

    def test_df_mod_zero_array(self) -> None:
        ...

    def test_df_mod_zero_int(self) -> None:
        ...

    def test_df_mod_zero_series_does_not_commute(self) -> None:
        ...


class TestMultiplicationDivision:
    def test_divide_decimal(self, box: Any) -> None:
        ...

    def test_div_equiv_binop(self) -> None:
        ...

    def test_div_int(self, numeric_idx: Any) -> None:
        ...

    def test_mul_int_identity(
            self, op: Any, numeric_idx: Any, box: Any) -> None:
        ...

    def test_mul_int_array(self, numeric_idx: Any) -> None:
        ...

    def test_mul_int_series(self, numeric_idx: Any) -> None:
        ...

    def test_mul_float_series(self, numeric_idx: Any) -> None:
        ...

    def test_mul_index(self, numeric_idx: Any) -> None:
        ...

    def test_mul_datelike_raises(self, numeric_idx: Any) -> None:
        ...

    def test_mul_size_mismatch_raises(self, numeric_idx: Any) -> None:
        ...

    def test_pow_float(self, op: Any, numeric_idx: Any, box: Any) -> None:
        ...

    def test_modulo(self, numeric_idx: Any, box: Any) -> None:
        ...

    def test_divmod_scalar(self, numeric_idx: Any) -> None:
        ...

    def test_divmod_ndarray(self, numeric_idx: Any) -> None:
        ...

    def test_divmod_series(self, numeric_idx: Any) -> None:
        ...

    def test_ops_np_scalar(self, other: Any) -> None:
        ...

    def test_operators_frame(self) -> None:
        ...

    def test_modulo2(self) -> None:
        ...

    def test_modulo_zero_int(self) -> None:
        ...


class TestAdditionSubtraction:
    def test_arith_ops_df_compat(self) -> None:
        ...

    def test_series_frame_radd_bug(self):
        ...

    def test_datetime64_with_index(self) -> None:
        ...

    def test_frame_operators(self, float_frame: Any) -> None:
        ...

    def test_series_operators(self) -> None:
        ...

    def test_divmod(self) -> None:
        ...

    def test_series_divmod_zero(self) -> None:
        ...


class TestUFuncCompat:
    def test_ufunc_compat(self, holder: Any) -> None:
        ...

    def test_ufunc_coercions(self, holder: Any) -> None:
        ...

    def test_ufunc_multiple_return_values(self, holder: Any) -> None:
        ...

    def test_ufunc_at(self) -> None:
        ...


class TestObjectDtypeEquivalence:
    def test_numarr_with_dtype_add_nan(self, dtype: Any, box: Any) -> None:
        ...

    def test_numarr_with_dtype_add_int(self, dtype: Any, box: Any) -> None:
        ...

    def test_operators_reverse_object(self, op: Any) -> None:
        ...


class TestNumericArithmeticUnsorted:
    def check_binop(self, ops: Any, scalars: Any, idxs: Any) -> None:
        ...

    def test_binops(self) -> None:
        ...

    def test_binops_pow(self) -> None:
        ...

    def test_arithmetic_with_frame_or_series(self, op: Any) -> None:
        ...

    def test_numeric_compat2(self) -> None:
        ...

    def test_addsub_arithmetic(self, dtype: Any, delta: Any) -> None:
        ...
