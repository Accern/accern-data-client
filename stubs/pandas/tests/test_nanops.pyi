# Stubs for pandas.tests.test_nanops (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,too-many-ancestors

from typing import Any, Optional

use_bn: Any


class TestnanopsDataFrame:
    arr_float: Any = ...
    arr_float1: Any = ...
    arr_complex: Any = ...
    arr_int: Any = ...
    arr_bool: Any = ...
    arr_str: Any = ...
    arr_utf: Any = ...
    arr_date: Any = ...
    arr_tdelta: Any = ...
    arr_nan: Any = ...
    arr_float_nan: Any = ...
    arr_float1_nan: Any = ...
    arr_nan_float1: Any = ...
    arr_nan_nan: Any = ...
    arr_inf: Any = ...
    arr_float_inf: Any = ...
    arr_nan_inf: Any = ...
    arr_float_nan_inf: Any = ...
    arr_nan_nan_inf: Any = ...
    arr_obj: Any = ...
    arr_nan_nanj: Any = ...
    arr_complex_nan: Any = ...
    arr_nan_infj: Any = ...
    arr_complex_nan_infj: Any = ...
    arr_float_2d: Any = ...
    arr_float1_2d: Any = ...
    arr_nan_2d: Any = ...
    arr_float_nan_2d: Any = ...
    arr_float1_nan_2d: Any = ...
    arr_nan_float1_2d: Any = ...
    arr_float_1d: Any = ...
    arr_float1_1d: Any = ...
    arr_nan_1d: Any = ...
    arr_float_nan_1d: Any = ...
    arr_float1_nan_1d: Any = ...
    arr_nan_float1_1d: Any = ...

    def setup_method(self, method: Any) -> None:
        ...

    def teardown_method(self, method: Any) -> None:
        ...

    def check_results(
            self, targ: Any, res: Any, axis: Any,
            check_dtype: bool = ...) -> None:
        ...

    def check_fun_data(
            self, testfunc: Any, targfunc: Any, testarval: Any, targarval: Any,
            targarnanval: Any, check_dtype: bool = ...,
            empty_targfunc: Optional[Any] = ..., **kwargs: Any) -> None:
        ...

    def check_fun(
            self, testfunc: Any, targfunc: Any, testar: Any,
            targar: Optional[Any] = ..., targarnan: Optional[Any] = ...,
            empty_targfunc: Optional[Any] = ..., **kwargs: Any) -> None:
        ...

    def check_funs(
            self, testfunc: Any, targfunc: Any, allow_complex: bool = ...,
            allow_all_nan: bool = ..., allow_str: bool = ...,
            allow_date: bool = ..., allow_tdelta: bool = ...,
            allow_obj: bool = ..., **kwargs: Any) -> None:
        ...

    def test_nanany(self) -> None:
        ...

    def test_nanall(self) -> None:
        ...

    def test_nansum(self) -> None:
        ...

    def test_nanmean(self) -> None:
        ...

    def test_nanmean_overflow(self) -> None:
        ...

    def test_returned_dtype(self) -> None:
        ...

    def test_nanmedian(self) -> None:
        ...

    def test_nanvar(self, ddof: Any) -> None:
        ...

    def test_nanstd(self, ddof: Any) -> None:
        ...

    def test_nansem(self, ddof: Any) -> None:
        ...

    def test_nanmin(self) -> None:
        ...

    def test_nanmax(self) -> None:
        ...

    def test_nanargmax(self) -> None:
        ...

    def test_nanargmin(self) -> None:
        ...

    def test_nanskew(self) -> None:
        ...

    def test_nankurt(self) -> None:
        ...

    def test_nanprod(self) -> None:
        ...

    def check_nancorr_nancov_2d(
            self, checkfun: Any, targ0: Any, targ1: Any,
            **kwargs: Any) -> None:
        ...

    def check_nancorr_nancov_1d(
            self, checkfun: Any, targ0: Any, targ1: Any,
            **kwargs: Any) -> None:
        ...

    def test_nancorr(self) -> None:
        ...

    def test_nancorr_pearson(self) -> None:
        ...

    def test_nancorr_kendall(self) -> None:
        ...

    def test_nancorr_spearman(self) -> None:
        ...

    def test_nancov(self) -> None:
        ...

    def check_nancomp(self, checkfun: Any, targ0: Any) -> None:
        ...

    def test_nangt(self) -> None:
        ...

    def test_nange(self) -> None:
        ...

    def test_nanlt(self) -> None:
        ...

    def test_nanle(self) -> None:
        ...

    def test_naneq(self) -> None:
        ...

    def test_nanne(self) -> None:
        ...

    def check_bool(
            self, func: Any, value: Any, correct: Any, *args: Any,
            **kwargs: Any) -> None:
        ...

    def test__has_infs(self) -> None:
        ...

    def test__isfinite(self):
        ...

    def test__bn_ok_dtype(self) -> None:
        ...


class TestEnsureNumeric:
    def test_numeric_values(self) -> None:
        ...

    def test_ndarray(self) -> None:
        ...

    def test_convertable_values(self) -> None:
        ...

    def test_non_convertable_values(self) -> None:
        ...


class TestNanvarFixedValues:
    variance: float = ...
    samples: Any = ...

    def setup_method(self, method: Any) -> None:
        ...

    def test_nanvar_all_finite(self) -> None:
        ...

    def test_nanvar_nans(self) -> None:
        ...

    def test_nanstd_nans(self) -> None:
        ...

    def test_nanvar_axis(self) -> None:
        ...

    def test_nanvar_ddof(self) -> None:
        ...

    def test_ground_truth(self) -> None:
        ...

    def test_nanstd_roundoff(self) -> None:
        ...

    @property
    def prng(self):
        ...


class TestNanskewFixedValues:
    samples: Any = ...
    actual_skew: Any = ...

    def setup_method(self, method: Any) -> None:
        ...

    def test_constant_series(self) -> None:
        ...

    def test_all_finite(self) -> None:
        ...

    def test_ground_truth(self) -> None:
        ...

    def test_axis(self) -> None:
        ...

    def test_nans(self) -> None:
        ...

    def test_nans_skipna(self) -> None:
        ...

    @property
    def prng(self):
        ...


class TestNankurtFixedValues:
    samples: Any = ...
    actual_kurt: Any = ...

    def setup_method(self, method: Any) -> None:
        ...

    def test_constant_series(self) -> None:
        ...

    def test_all_finite(self) -> None:
        ...

    def test_ground_truth(self) -> None:
        ...

    def test_axis(self) -> None:
        ...

    def test_nans(self) -> None:
        ...

    def test_nans_skipna(self) -> None:
        ...

    @property
    def prng(self):
        ...


class TestDatetime64NaNOps:
    def test_nanmean(self, tz: Any) -> None:
        ...


def test_use_bottleneck() -> None:
    ...

def test_numpy_ops(numpy_op: Any, expected: Any) -> None:
    ...

def test_nanops_independent_of_mask_param(operation: Any) -> None:
    ...
