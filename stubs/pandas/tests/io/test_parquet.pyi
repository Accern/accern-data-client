# Stubs for pandas.tests.io.test_parquet (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin

from typing import Any, Optional

def engine(request: Any) -> Any:
    ...

def pa():
    ...

def fp():
    ...

def df_compat():
    ...

def df_cross_compat():
    ...

def df_full():
    ...

def check_round_trip(df: Any, engine: Optional[Any] = ..., path: Optional[Any] = ..., write_kwargs: Optional[Any] = ..., read_kwargs: Optional[Any] = ..., expected: Optional[Any] = ..., check_names: bool = ..., repeat: int = ...) -> None:
    ...

def test_invalid_engine(df_compat: Any) -> None:
    ...

def test_options_py(df_compat: Any, pa: Any) -> None:
    ...

def test_options_fp(df_compat: Any, fp: Any) -> None:
    ...

def test_options_auto(df_compat: Any, fp: Any, pa: Any) -> None:
    ...

def test_options_get_engine(fp: Any, pa: Any) -> None:
    ...

def test_cross_engine_pa_fp(df_cross_compat: Any, pa: Any, fp: Any) -> None:
    ...

def test_cross_engine_fp_pa(df_cross_compat: Any, pa: Any, fp: Any) -> None:
    ...


class Base:
    def check_error_on_write(self, df: Any, engine: Any, exc: Any) -> None:
        ...


class TestBasic(Base):
    def test_error(self, engine: Any) -> None:
        ...

    def test_columns_dtypes(self, engine: Any) -> None:
        ...

    def test_columns_dtypes_invalid(self, engine: Any) -> None:
        ...

    def test_compression(self, engine: Any, compression: Any) -> None:
        ...

    def test_read_columns(self, engine: Any) -> None:
        ...

    def test_write_index(self, engine: Any) -> None:
        ...

    def test_write_multiindex(self, pa: Any) -> None:
        ...

    def test_write_column_multiindex(self, engine: Any) -> None:
        ...

    def test_multiindex_with_columns(self, pa: Any) -> None:
        ...

    def test_write_ignoring_index(self, engine: Any) -> None:
        ...


class TestParquetPyArrow(Base):
    def test_basic(self, pa: Any, df_full: Any) -> None:
        ...

    def test_basic_subset_columns(self, pa: Any, df_full: Any) -> None:
        ...

    def test_duplicate_columns(self, pa: Any) -> None:
        ...

    def test_unsupported(self, pa: Any) -> None:
        ...

    def test_categorical(self, pa: Any) -> None:
        ...

    def test_s3_roundtrip(self, df_compat: Any, s3_resource: Any, pa: Any) -> None:
        ...

    def test_partition_cols_supported(self, pa: Any, df_full: Any) -> None:
        ...

    def test_empty_dataframe(self, pa: Any) -> None:
        ...


class TestParquetFastParquet(Base):
    def test_basic(self, fp: Any, df_full: Any) -> None:
        ...

    def test_duplicate_columns(self, fp: Any) -> None:
        ...

    def test_bool_with_none(self, fp: Any) -> None:
        ...

    def test_unsupported(self, fp: Any) -> None:
        ...

    def test_categorical(self, fp: Any) -> None:
        ...

    def test_filter_row_groups(self, fp: Any) -> None:
        ...

    def test_s3_roundtrip(self, df_compat: Any, s3_resource: Any, fp: Any) -> None:
        ...

    def test_partition_cols_supported(self, fp: Any, df_full: Any) -> None:
        ...

    def test_partition_on_supported(self, fp: Any, df_full: Any) -> None:
        ...

    def test_error_on_using_partition_cols_and_partition_on(self, fp: Any, df_full: Any) -> None:
        ...

    def test_empty_dataframe(self, fp: Any) -> None:
        ...
