# Stubs for pandas.tests.io.test_sql (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,too-many-ancestors

from typing import Any, Optional

SQLALCHEMY_INSTALLED: bool
SQL_STRINGS: Any

class MixInBase:
    def teardown_method(self, method: Any) -> None:
        ...


class MySQLMixIn(MixInBase):
    def drop_table(self, table_name: Any) -> None:
        ...


class SQLiteMixIn(MixInBase):
    def drop_table(self, table_name: Any) -> None:
        ...


class SQLAlchemyMixIn(MixInBase):
    def drop_table(self, table_name: Any) -> None:
        ...


class PandasSQLTest:
    def load_iris_data(self, datapath: Any, request: Any) -> None:
        ...


class _TestSQLApi(PandasSQLTest):
    flavor: str = ...
    mode: Any = ...
    conn: Any = ...
    def setup_connect(self) -> None:
        ...

    def setup_method(self, load_iris_data: Any) -> None:
        ...

    def load_test_data_and_sql(self) -> None:
        ...

    def test_read_sql_iris(self) -> None:
        ...

    def test_read_sql_view(self) -> None:
        ...

    def test_to_sql(self) -> None:
        ...

    def test_to_sql_fail(self) -> None:
        ...

    def test_to_sql_replace(self) -> None:
        ...

    def test_to_sql_append(self) -> None:
        ...

    def test_to_sql_type_mapping(self) -> None:
        ...

    def test_to_sql_series(self) -> None:
        ...

    def test_roundtrip(self) -> None:
        ...

    def test_roundtrip_chunksize(self) -> None:
        ...

    def test_execute_sql(self) -> None:
        ...

    def test_date_parsing(self) -> None:
        ...

    def test_date_and_index(self) -> None:
        ...

    def test_timedelta(self) -> None:
        ...

    def test_complex_raises(self) -> None:
        ...

    def test_to_sql_index_label(self, index_name: Any, index_label: Any, expected: Any) -> None:
        ...

    def test_to_sql_index_label_multiindex(self) -> None:
        ...

    def test_multiindex_roundtrip(self) -> None:
        ...

    def test_integer_col_names(self) -> None:
        ...

    def test_get_schema(self) -> None:
        ...

    def test_get_schema_dtypes(self) -> None:
        ...

    def test_get_schema_keys(self) -> None:
        ...

    def test_chunksize_read(self) -> None:
        ...

    def test_categorical(self) -> None:
        ...

    def test_unicode_column_name(self) -> None:
        ...

    def test_escaped_table_name(self) -> None:
        ...


class TestSQLApi(SQLAlchemyMixIn, _TestSQLApi):
    flavor: str = ...
    mode: str = ...
    def connect(self):
        ...

    def test_read_table_columns(self) -> None:
        ...

    def test_read_table_index_col(self) -> None:
        ...

    def test_read_sql_delegate(self) -> None:
        ...

    def test_not_reflect_all_tables(self) -> None:
        ...

    def test_warning_case_insensitive_table_name(self) -> None:
        ...

    def test_sqlalchemy_type_mapping(self) -> None:
        ...

    def test_database_uri_string(self) -> None:
        ...

    def test_query_by_text_obj(self) -> None:
        ...

    def test_query_by_select_obj(self) -> None:
        ...


class _EngineToConnMixin:
    pandasSQL: Any = ...
    conn: Any = ...
    def setup_method(self, load_iris_data: Any) -> None:
        ...


class TestSQLApiConn(_EngineToConnMixin, TestSQLApi):
    ...


class TestSQLiteFallbackApi(SQLiteMixIn, _TestSQLApi):
    flavor: str = ...
    mode: str = ...
    def connect(self, database: str = ...) -> Any:
        ...

    def test_sql_open_close(self) -> None:
        ...

    def test_con_string_import_error(self) -> None:
        ...

    def test_read_sql_delegate(self) -> None:
        ...

    def test_safe_names_warning(self) -> None:
        ...

    def test_get_schema2(self) -> None:
        ...

    def test_sqlite_type_mapping(self) -> None:
        ...


class _TestSQLAlchemy(SQLAlchemyMixIn, PandasSQLTest):
    flavor: Any = ...
    @classmethod
    def setup_class(cls) -> None:
        ...

    def load_test_data_and_sql(self) -> None:
        ...

    def setup_method(self, load_iris_data: Any) -> None:
        ...

    @classmethod
    def setup_import(cls) -> None:
        ...

    @classmethod
    def setup_driver(cls) -> None:
        ...

    @classmethod
    def connect(cls) -> None:
        ...

    conn: Any = ...
    pandasSQL: Any = ...
    def setup_connect(self) -> None:
        ...

    def test_read_sql(self) -> None:
        ...

    def test_read_sql_parameter(self) -> None:
        ...

    def test_read_sql_named_parameter(self) -> None:
        ...

    def test_to_sql(self) -> None:
        ...

    def test_to_sql_empty(self) -> None:
        ...

    def test_to_sql_fail(self) -> None:
        ...

    def test_to_sql_replace(self) -> None:
        ...

    def test_to_sql_append(self) -> None:
        ...

    def test_to_sql_method_multi(self) -> None:
        ...

    def test_to_sql_method_callable(self) -> None:
        ...

    def test_create_table(self) -> None:
        ...

    def test_drop_table(self) -> None:
        ...

    def test_roundtrip(self) -> None:
        ...

    def test_execute_sql(self) -> None:
        ...

    def test_read_table(self) -> None:
        ...

    def test_read_table_columns(self) -> None:
        ...

    def test_read_table_absent_raises(self) -> None:
        ...

    def test_default_type_conversion(self) -> None:
        ...

    def test_bigint(self) -> None:
        ...

    def test_default_date_load(self) -> None:
        ...

    def test_datetime_with_timezone(self) -> None:
        ...

    def test_datetime_with_timezone_roundtrip(self) -> None:
        ...

    def test_naive_datetimeindex_roundtrip(self) -> None:
        ...

    def test_date_parsing(self) -> None:
        ...

    def test_datetime(self) -> None:
        ...

    def test_datetime_NaT(self) -> None:
        ...

    def test_datetime_date(self) -> None:
        ...

    def test_datetime_time(self):
        ...

    def test_mixed_dtype_insert(self) -> None:
        ...

    def test_nan_numeric(self) -> None:
        ...

    def test_nan_fullcolumn(self) -> None:
        ...

    def test_nan_string(self) -> None:
        ...

    def test_to_sql_save_index(self) -> None:
        ...

    def test_transactions(self) -> None:
        ...

    def test_get_schema_create_table(self) -> None:
        ...

    def test_dtype(self) -> None:
        ...

    def test_notna_dtype(self) -> None:
        ...

    def test_double_precision(self) -> None:
        ...

    def test_connectable_issue_example(self):
        ...

    def test_temporary_table(self) -> None:
        ...


class _TestSQLAlchemyConn(_EngineToConnMixin, _TestSQLAlchemy):
    def test_transactions(self) -> None:
        ...


class _TestSQLiteAlchemy:
    flavor: str = ...
    @classmethod
    def connect(cls) -> Any:
        ...

    @classmethod
    def setup_driver(cls) -> None:
        ...

    def test_default_type_conversion(self) -> None:
        ...

    def test_default_date_load(self) -> None:
        ...

    def test_bigint_warning(self) -> None:
        ...


class _TestMySQLAlchemy:
    flavor: str = ...
    @classmethod
    def connect(cls) -> Any:
        ...

    @classmethod
    def setup_driver(cls) -> None:
        ...

    def test_default_type_conversion(self) -> None:
        ...

    def test_read_procedure(self) -> None:
        ...


class _TestPostgreSQLAlchemy:
    flavor: str = ...
    @classmethod
    def connect(cls) -> Any:
        ...

    @classmethod
    def setup_driver(cls) -> None:
        ...

    def test_schema_support(self) -> None:
        ...

    def test_copy_from_callable_insertion_method(self) -> None:
        ...


class TestMySQLAlchemy(_TestMySQLAlchemy, _TestSQLAlchemy):
    ...

class TestMySQLAlchemyConn(_TestMySQLAlchemy, _TestSQLAlchemyConn):
    ...

class TestPostgreSQLAlchemy(_TestPostgreSQLAlchemy, _TestSQLAlchemy):
    ...

class TestPostgreSQLAlchemyConn(_TestPostgreSQLAlchemy, _TestSQLAlchemyConn):
    ...

class TestSQLiteAlchemy(_TestSQLiteAlchemy, _TestSQLAlchemy):
    ...

class TestSQLiteAlchemyConn(_TestSQLiteAlchemy, _TestSQLAlchemyConn):
    ...


class TestSQLiteFallback(SQLiteMixIn, PandasSQLTest):
    flavor: str = ...
    @classmethod
    def connect(cls) -> Any:
        ...

    conn: Any = ...
    def setup_connect(self) -> None:
        ...

    pandasSQL: Any = ...
    def load_test_data_and_sql(self) -> None:
        ...

    def setup_method(self, load_iris_data: Any) -> None:
        ...

    def test_read_sql(self) -> None:
        ...

    def test_read_sql_parameter(self) -> None:
        ...

    def test_read_sql_named_parameter(self) -> None:
        ...

    def test_to_sql(self) -> None:
        ...

    def test_to_sql_empty(self) -> None:
        ...

    def test_to_sql_fail(self) -> None:
        ...

    def test_to_sql_replace(self) -> None:
        ...

    def test_to_sql_append(self) -> None:
        ...

    def test_create_and_drop_table(self) -> None:
        ...

    def test_roundtrip(self) -> None:
        ...

    def test_execute_sql(self) -> None:
        ...

    def test_datetime_date(self) -> None:
        ...

    def test_datetime_time(self) -> None:
        ...

    def test_to_sql_save_index(self) -> None:
        ...

    def test_transactions(self) -> None:
        ...

    def test_dtype(self) -> None:
        ...

    def test_notna_dtype(self) -> None:
        ...

    def test_illegal_names(self) -> None:
        ...


def date_format(dt: Any) -> Any:
    ...

def format_query(sql: Any, *args: Any) -> Any:
    ...

def tquery(query: Any, con: Optional[Any] = ..., cur: Optional[Any] = ...) -> Any:
    ...


class TestXSQLite(SQLiteMixIn):
    method: Any = ...
    conn: Any = ...
    def setup_method(self, request: Any, datapath: Any) -> None:
        ...

    def test_basic(self) -> None:
        ...

    def test_write_row_by_row(self) -> None:
        ...

    def test_execute(self) -> None:
        ...

    def test_schema(self) -> None:
        ...

    def test_execute_fail(self) -> None:
        ...

    def test_execute_closed_connection(self) -> None:
        ...

    def test_na_roundtrip(self) -> None:
        ...

    def test_keyword_as_column_names(self) -> None:
        ...

    def test_onecolumn_of_integer(self) -> None:
        ...

    def test_if_exists(self) -> None:
        ...


class TestXMySQL(MySQLMixIn):
    @classmethod
    def setup_class(cls) -> None:
        ...

    method: Any = ...
    def setup_method(self, request: Any, datapath: Any) -> None:
        ...

    def test_basic(self) -> None:
        ...

    def test_write_row_by_row(self) -> None:
        ...

    def test_chunksize_read_type(self) -> None:
        ...

    def test_execute(self) -> None:
        ...

    def test_schema(self) -> None:
        ...

    def test_execute_fail(self) -> None:
        ...

    def test_execute_closed_connection(self, request: Any, datapath: Any) -> None:
        ...

    def test_na_roundtrip(self) -> None:
        ...

    def test_keyword_as_column_names(self) -> None:
        ...

    def test_if_exists(self) -> None:
        ...
