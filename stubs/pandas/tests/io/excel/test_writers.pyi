# Stubs for pandas.tests.io.excel.test_writers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,too-many-ancestors

from typing import Any

class TestRoundTrip:
    def test_read_one_empty_col_no_header(self, ext: Any, header: Any, expected: Any) -> None:
        ...

    def test_read_one_empty_col_with_header(self, ext: Any, header: Any, expected: Any) -> None:
        ...

    def test_set_column_names_in_parameter(self, ext: Any) -> None:
        ...

    def test_creating_and_reading_multiple_sheets(self, ext: Any) -> None:
        ...

    def test_read_excel_multiindex_empty_level(self, ext: Any) -> None:
        ...

    def test_excel_multindex_roundtrip(self, ext: Any, c_idx_names: Any, r_idx_names: Any, c_idx_levels: Any, r_idx_levels: Any) -> None:
        ...

    def test_read_excel_parse_dates(self, ext: Any) -> None:
        ...


class _WriterBase:
    path: Any = ...
    def set_engine_and_path(self, engine: Any, ext: Any) -> None:
        ...


class TestExcelWriter(_WriterBase):
    def test_excel_sheet_size(self, engine: Any, ext: Any) -> None:
        ...

    def test_excel_sheet_by_name_raise(self, engine: Any, ext: Any) -> None:
        ...

    def test_excel_writer_context_manager(self, frame: Any, engine: Any, ext: Any) -> None:
        ...

    def test_roundtrip(self, engine: Any, ext: Any, frame: Any) -> None:
        ...

    def test_mixed(self, engine: Any, ext: Any, frame: Any) -> None:
        ...

    def test_ts_frame(self, tsframe: Any, engine: Any, ext: Any) -> None:
        ...

    def test_basics_with_nan(self, engine: Any, ext: Any, frame: Any) -> None:
        ...

    def test_int_types(self, engine: Any, ext: Any, np_type: Any) -> None:
        ...

    def test_float_types(self, engine: Any, ext: Any, np_type: Any) -> None:
        ...

    def test_bool_types(self, engine: Any, ext: Any, np_type: Any) -> None:
        ...

    def test_inf_roundtrip(self, engine: Any, ext: Any) -> None:
        ...

    def test_sheets(self, engine: Any, ext: Any, frame: Any, tsframe: Any) -> None:
        ...

    def test_colaliases(self, engine: Any, ext: Any, frame: Any) -> None:
        ...

    def test_roundtrip_indexlabels(self, merge_cells: Any, engine: Any, ext: Any, frame: Any) -> None:
        ...

    def test_excel_roundtrip_indexname(self, merge_cells: Any, engine: Any, ext: Any) -> None:
        ...

    def test_excel_roundtrip_datetime(self, merge_cells: Any, tsframe: Any, engine: Any, ext: Any) -> None:
        ...

    def test_excel_date_datetime_format(self, engine: Any, ext: Any) -> None:
        ...

    def test_to_excel_interval_no_labels(self, engine: Any, ext: Any) -> None:
        ...

    def test_to_excel_interval_labels(self, engine: Any, ext: Any) -> None:
        ...

    def test_to_excel_timedelta(self, engine: Any, ext: Any) -> None:
        ...

    def test_to_excel_periodindex(self, engine: Any, ext: Any, tsframe: Any) -> None:
        ...

    def test_to_excel_multiindex(self, merge_cells: Any, engine: Any, ext: Any, frame: Any) -> None:
        ...

    def test_to_excel_multiindex_nan_label(self, merge_cells: Any, engine: Any, ext: Any) -> None:
        ...

    def test_to_excel_multiindex_cols(self, merge_cells: Any, engine: Any, ext: Any, frame: Any) -> None:
        ...

    def test_to_excel_multiindex_dates(self, merge_cells: Any, engine: Any, ext: Any, tsframe: Any) -> None:
        ...

    def test_to_excel_multiindex_no_write_index(self, engine: Any, ext: Any) -> None:
        ...

    def test_to_excel_float_format(self, engine: Any, ext: Any) -> None:
        ...

    def test_to_excel_output_encoding(self, engine: Any, ext: Any) -> None:
        ...

    def test_to_excel_unicode_filename(self, engine: Any, ext: Any) -> None:
        ...

    def test_excel_010_hemstring(self, merge_cells: Any, engine: Any, ext: Any, c_idx_nlevels: Any, r_idx_nlevels: Any, use_headers: Any) -> None:
        ...

    def test_duplicated_columns(self, engine: Any, ext: Any) -> None:
        ...

    def test_swapped_columns(self, engine: Any, ext: Any) -> None:
        ...

    def test_invalid_columns(self, engine: Any, ext: Any) -> None:
        ...

    def test_comment_arg(self, engine: Any, ext: Any) -> None:
        ...

    def test_comment_default(self, engine: Any, ext: Any) -> None:
        ...

    def test_comment_used(self, engine: Any, ext: Any) -> None:
        ...

    def test_comment_empty_line(self, engine: Any, ext: Any) -> None:
        ...

    def test_datetimes(self, engine: Any, ext: Any) -> None:
        ...

    def test_bytes_io(self, engine: Any, ext: Any) -> None:
        ...

    def test_write_lists_dict(self, engine: Any, ext: Any) -> None:
        ...

    def test_true_and_false_value_options(self, engine: Any, ext: Any) -> None:
        ...

    def test_freeze_panes(self, engine: Any, ext: Any) -> None:
        ...

    def test_path_path_lib(self, engine: Any, ext: Any) -> None:
        ...

    def test_path_local_path(self, engine: Any, ext: Any) -> None:
        ...

    def test_merged_cell_custom_objects(self, engine: Any, merge_cells: Any, ext: Any) -> None:
        ...

    def test_raise_when_saving_timezones(self, engine: Any, ext: Any, dtype: Any, tz_aware_fixture: Any) -> None:
        ...


class TestExcelWriterEngineTests:
    def test_ExcelWriter_dispatch(self, klass: Any, ext: Any) -> None:
        ...

    def test_ExcelWriter_dispatch_raises(self) -> None:
        ...

    def test_register_writer(self) -> None:
        ...


class TestFSPath:
    def test_excelfile_fspath(self) -> None:
        ...

    def test_excelwriter_fspath(self) -> None:
        ...
