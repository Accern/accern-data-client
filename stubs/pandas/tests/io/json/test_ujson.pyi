# Stubs for pandas.tests.io.json.test_ujson (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin

from typing import Any

def orient(request: Any) -> Any:
    ...

def numpy(request: Any) -> Any:
    ...


class TestUltraJSONTests:
    def test_encode_decimal(self) -> None:
        ...

    def test_encode_string_conversion(self, ensure_ascii: Any) -> None:
        ...

    def test_double_long_numbers(self, long_number: Any) -> None:
        ...

    def test_encode_non_c_locale(self) -> None:
        ...

    def test_decimal_decode_test_precise(self) -> None:
        ...

    def test_encode_double_tiny_exponential(self) -> None:
        ...

    def test_encode_dict_with_unicode_keys(self, unicode_key: Any) -> None:
        ...

    def test_encode_double_conversion(self, double_input: Any) -> None:
        ...

    def test_encode_with_decimal(self) -> None:
        ...

    def test_encode_array_of_nested_arrays(self) -> None:
        ...

    def test_encode_array_of_doubles(self) -> None:
        ...

    def test_double_precision(self) -> None:
        ...

    def test_invalid_double_precision(self, invalid_val: Any) -> None:
        ...

    def test_encode_string_conversion2(self) -> None:
        ...

    def test_encode_unicode_conversion(self, unicode_input: Any) -> None:
        ...

    def test_encode_control_escaping(self) -> None:
        ...

    def test_encode_unicode_surrogate_pair(self) -> None:
        ...

    def test_encode_unicode_4bytes_utf8(self) -> None:
        ...

    def test_encode_unicode_4bytes_utf8highest(self) -> None:
        ...

    def test_encode_array_in_array(self) -> None:
        ...

    def test_encode_num_conversion(self, num_input: Any) -> None:
        ...

    def test_encode_list_conversion(self) -> None:
        ...

    def test_encode_dict_conversion(self) -> None:
        ...

    def test_encode_builtin_values_conversion(self, builtin_value: Any) -> None:
        ...

    def test_encode_datetime_conversion(self) -> None:
        ...

    def test_encode_date_conversion(self) -> None:
        ...

    def test_encode_time_conversion_basic(self, test: Any) -> None:
        ...

    def test_encode_time_conversion_pytz(self) -> None:
        ...

    def test_encode_time_conversion_dateutil(self) -> None:
        ...

    def test_encode_as_null(self, decoded_input: Any) -> None:
        ...

    def test_datetime_units(self) -> None:
        ...

    def test_encode_to_utf8(self) -> None:
        ...

    def test_decode_from_unicode(self) -> None:
        ...

    def test_encode_recursion_max(self) -> None:
        ...

    def test_decode_jibberish(self) -> None:
        ...

    def test_decode_broken_json(self, broken_json: Any) -> None:
        ...

    def test_decode_depth_too_big(self, too_big_char: Any) -> None:
        ...

    def test_decode_bad_string(self, bad_string: Any) -> None:
        ...

    def test_decode_broken_json_leak(self, broken_json: Any) -> None:
        ...

    def test_decode_invalid_dict(self, invalid_dict: Any) -> None:
        ...

    def test_decode_numeric_int(self, numeric_int_as_str: Any) -> None:
        ...

    def test_encode_null_character(self) -> None:
        ...

    def test_decode_null_character(self) -> None:
        ...

    def test_encode_list_long_conversion(self) -> None:
        ...

    def test_encode_long_conversion(self) -> None:
        ...

    def test_decode_numeric_int_exp(self, int_exp: Any) -> None:
        ...

    def test_loads_non_str_bytes_raises(self) -> None:
        ...

    def test_version(self) -> None:
        ...

    def test_encode_numeric_overflow(self) -> None:
        ...

    def test_encode_numeric_overflow_nested(self) -> None:
        ...

    def test_decode_number_with_32bit_sign_bit(self, val: Any) -> None:
        ...

    def test_encode_big_escape(self) -> None:
        ...

    def test_decode_big_escape(self) -> None:
        ...

    def test_to_dict(self):
        ...

    val: Any = ...
    def test_default_handler(self):
        ...


class TestNumpyJSONTests:
    def test_bool(self, bool_input: Any) -> None:
        ...

    def test_bool_array(self) -> None:
        ...

    def test_int(self, any_int_dtype: Any) -> None:
        ...

    def test_int_array(self, any_int_dtype: Any) -> None:
        ...

    def test_int_max(self, any_int_dtype: Any) -> None:
        ...

    def test_float(self, float_dtype: Any) -> None:
        ...

    def test_float_array(self, float_dtype: Any) -> None:
        ...

    def test_float_max(self, float_dtype: Any) -> None:
        ...

    def test_array_basic(self) -> None:
        ...

    def test_array_reshaped(self, shape: Any) -> None:
        ...

    def test_array_list(self) -> None:
        ...

    def test_array_float(self) -> None:
        ...

    def test_0d_array(self) -> None:
        ...

    def test_array_numpy_except(self, bad_input: Any, exc_type: Any, kwargs: Any) -> None:
        ...

    def test_array_numpy_labelled(self) -> None:
        ...


class TestPandasJSONTests:
    def test_dataframe(self, orient: Any, numpy: Any) -> None:
        ...

    def test_dataframe_nested(self, orient: Any) -> None:
        ...

    def test_dataframe_numpy_labelled(self, orient: Any) -> None:
        ...

    def test_series(self, orient: Any, numpy: Any) -> None:
        ...

    def test_series_nested(self, orient: Any) -> None:
        ...

    def test_index(self) -> None:
        ...

    def test_datetime_index(self) -> None:
        ...

    def test_decode_invalid_array(self, invalid_arr: Any) -> None:
        ...

    def test_decode_array(self, arr: Any) -> None:
        ...

    def test_decode_extreme_numbers(self, extreme_num: Any) -> None:
        ...

    def test_decode_too_extreme_numbers(self, too_extreme_num: Any) -> None:
        ...

    def test_decode_with_trailing_whitespaces(self) -> None:
        ...

    def test_decode_with_trailing_non_whitespaces(self) -> None:
        ...

    def test_decode_array_with_big_int(self) -> None:
        ...

    def test_decode_floating_point(self, sign: Any, float_number: Any) -> None:
        ...

    def test_encode_big_set(self) -> None:
        ...

    def test_encode_empty_set(self) -> None:
        ...

    def test_encode_set(self) -> None:
        ...
