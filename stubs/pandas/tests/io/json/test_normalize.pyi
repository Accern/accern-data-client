# Stubs for pandas.tests.io.json.test_normalize (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin

from typing import Any

def deep_nested():
    ...

def state_data():
    ...

def author_missing_data():
    ...

def missing_metadata():
    ...

def max_level_test_input_data():
    ...


class TestJSONNormalize:
    def test_simple_records(self) -> None:
        ...

    def test_simple_normalize(self, state_data: Any) -> None:
        ...

    def test_empty_array(self) -> None:
        ...

    def test_simple_normalize_with_separator(self, deep_nested: Any) -> None:
        ...

    def test_value_array_record_prefix(self) -> None:
        ...

    def test_nested_object_record_path(self) -> None:
        ...

    def test_more_deeply_nested(self, deep_nested: Any) -> None:
        ...

    def test_shallow_nested(self) -> None:
        ...

    def test_meta_name_conflict(self) -> None:
        ...

    def test_meta_parameter_not_modified(self) -> None:
        ...

    def test_record_prefix(self, state_data: Any) -> None:
        ...

    def test_non_ascii_key(self) -> None:
        ...

    def test_missing_field(self, author_missing_data: Any) -> None:
        ...

    def test_max_level_with_records_path(self, max_level: Any, expected: Any) -> None:
        ...


class TestNestedToRecord:
    def test_flat_stays_flat(self) -> None:
        ...

    def test_one_level_deep_flattens(self) -> None:
        ...

    def test_nested_flattens(self) -> None:
        ...

    def test_json_normalize_errors(self, missing_metadata: Any) -> None:
        ...

    def test_missing_meta(self, missing_metadata: Any) -> None:
        ...

    def test_donot_drop_nonevalues(self) -> None:
        ...

    def test_nonetype_top_level_bottom_level(self) -> None:
        ...

    def test_nonetype_multiple_levels(self) -> None:
        ...

    def test_with_max_level(self, max_level: Any, expected: Any, max_level_test_input_data: Any) -> None:
        ...

    def test_with_large_max_level(self) -> None:
        ...
