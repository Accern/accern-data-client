# Stubs for pandas.tests.io.parser.test_read_fwf (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin

from typing import Any

def test_basic() -> None:
    ...


def test_colspecs() -> None:
    ...


def test_widths() -> None:
    ...


def test_non_space_filler() -> None:
    ...


def test_over_specified() -> None:
    ...


def test_under_specified() -> None:
    ...


def test_read_csv_compat() -> None:
    ...


def test_bytes_io_input() -> None:
    ...


def test_fwf_colspecs_is_list_or_tuple() -> None:
    ...


def test_fwf_colspecs_is_list_or_tuple_of_two_element_tuples() -> None:
    ...


def test_fwf_colspecs_none(colspecs: Any, exp_data: Any) -> None:
    ...


def test_fwf_colspecs_infer_nrows(infer_nrows: Any, exp_data: Any) -> None:
    ...


def test_fwf_regression() -> None:
    ...


def test_fwf_for_uint8() -> None:
    ...


def test_fwf_comment(comment: Any) -> None:
    ...


def test_fwf_thousands(thousands: Any) -> None:
    ...


def test_bool_header_arg(header: Any) -> None:
    ...


def test_full_file() -> None:
    ...


def test_full_file_with_missing() -> None:
    ...


def test_full_file_with_spaces() -> None:
    ...


def test_full_file_with_spaces_and_missing() -> None:
    ...


def test_messed_up_data() -> None:
    ...


def test_multiple_delimiters() -> None:
    ...


def test_variable_width_unicode() -> None:
    ...


def test_dtype(dtype: Any) -> None:
    ...


def test_skiprows_inference() -> None:
    ...


def test_skiprows_by_index_inference() -> None:
    ...


def test_skiprows_inference_empty() -> None:
    ...


def test_whitespace_preservation() -> None:
    ...


def test_default_delimiter() -> None:
    ...


def test_fwf_compression(compression_only: Any, infer: Any) -> None:
    ...
