# Stubs for pandas.tests.resample.test_period_index (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin

from typing import Any

class TestPeriodIndex:
    def test_asfreq(self, series_and_frame: Any, freq: Any, kind: Any) -> None:
        ...

    def test_asfreq_fill_value(self, series: Any) -> None:
        ...

    def test_selection(self, index: Any, freq: Any, kind: Any, kwargs: Any) -> None:
        ...

    def test_annual_upsample_cases(self, targ: Any, conv: Any, meth: Any, month: Any, simple_period_range_series: Any) -> None:
        ...

    def test_basic_downsample(self, simple_period_range_series: Any) -> None:
        ...

    def test_not_subperiod(self, simple_period_range_series: Any, rule: Any, expected_error_msg: Any) -> None:
        ...

    def test_basic_upsample(self, freq: Any, simple_period_range_series: Any) -> None:
        ...

    def test_upsample_with_limit(self) -> None:
        ...

    def test_annual_upsample(self, simple_period_range_series: Any) -> None:
        ...

    def test_quarterly_upsample(self, month: Any, target: Any, convention: Any, simple_period_range_series: Any) -> None:
        ...

    def test_monthly_upsample(self, target: Any, convention: Any, simple_period_range_series: Any) -> None:
        ...

    def test_resample_basic(self) -> None:
        ...

    def test_resample_count(self, freq: Any, expected_vals: Any) -> None:
        ...

    def test_resample_same_freq(self, resample_method: Any) -> None:
        ...

    def test_resample_incompat_freq(self) -> None:
        ...

    def test_with_local_timezone_pytz(self) -> None:
        ...

    def test_resample_with_pytz(self) -> None:
        ...

    def test_with_local_timezone_dateutil(self) -> None:
        ...

    def test_resample_nonexistent_time_bin_edge(self) -> None:
        ...

    def test_resample_ambiguous_time_bin_edge(self) -> None:
        ...

    def test_fill_method_and_how_upsample(self) -> None:
        ...

    def test_weekly_upsample(self, day: Any, target: Any, convention: Any, simple_period_range_series: Any) -> None:
        ...

    def test_resample_to_timestamps(self, simple_period_range_series: Any) -> None:
        ...

    def test_resample_to_quarterly(self, simple_period_range_series: Any) -> None:
        ...

    def test_resample_fill_missing(self) -> None:
        ...

    def test_cant_fill_missing_dups(self) -> None:
        ...

    def test_resample_5minute(self, freq: Any, kind: Any) -> None:
        ...

    def test_upsample_daily_business_daily(self, simple_period_range_series: Any) -> None:
        ...

    def test_resample_irregular_sparse(self) -> None:
        ...

    def test_resample_weekly_all_na(self) -> None:
        ...

    def test_resample_tz_localized(self) -> None:
        ...

    def test_closed_left_corner(self) -> None:
        ...

    def test_quarterly_resampling(self) -> None:
        ...

    def test_resample_weekly_bug_1726(self) -> None:
        ...

    def test_resample_with_dst_time_change(self) -> None:
        ...

    def test_resample_bms_2752(self) -> None:
        ...

    def test_default_right_closed_label(self) -> None:
        ...

    def test_default_left_closed_label(self) -> None:
        ...

    def test_all_values_single_bin(self) -> None:
        ...

    def test_evenly_divisible_with_no_extra_bins(self) -> None:
        ...

    def test_loffset_returns_datetimeindex(self, frame: Any, kind: Any, agg_arg: Any) -> None:
        ...

    def test_upsampling_ohlc(self, freq: Any, period_mult: Any, kind: Any) -> None:
        ...

    def test_resample_with_nat(self, periods: Any, values: Any, freq: Any, expected_values: Any) -> None:
        ...

    def test_resample_with_only_nat(self) -> None:
        ...

    def test_resample_with_non_zero_base(self, start: Any, end: Any, start_freq: Any, end_freq: Any, base: Any) -> None:
        ...

    def test_get_period_range_edges(self, first: Any, last: Any, offset: Any, exp_first: Any, exp_last: Any) -> None:
        ...
