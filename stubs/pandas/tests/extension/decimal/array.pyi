# Stubs for pandas.tests.extension.decimal.array (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,too-many-ancestors

from typing import Any, Optional
from pandas.core.arrays import ExtensionArray, ExtensionScalarOpsMixin
from pandas.core.dtypes.base import ExtensionDtype

class DecimalDtype(ExtensionDtype):
    type: Any = ...
    name: str = ...
    na_value: Any = ...
    context: Any = ...
    def __init__(self, context: Optional[Any] = ...) -> None:
        ...

    @classmethod
    def construct_array_type(cls) -> Any:
        ...

    @classmethod
    def construct_from_string(cls, string: Any) -> Any:
        ...


class DecimalArray(ExtensionArray, ExtensionScalarOpsMixin):
    __array_priority__: int = ...
    def __init__(self, values: Any, dtype: Optional[Any] = ..., copy: bool = ..., context: Optional[Any] = ...) -> None:
        ...

    @property
    def dtype(self) -> Any:
        ...

    def __array_ufunc__(self, ufunc: Any, method: Any, *inputs: Any, **kwargs: Any) -> Any:
        ...

    def __getitem__(self, item: Any) -> Any:
        ...

    def take(self, indexer: Any, allow_fill: bool = ..., fill_value: Optional[Any] = ...) -> Any:
        ...

    def copy(self) -> Any:
        ...

    def astype(self, dtype: Any, copy: bool = ...) -> Any:
        ...

    def __setitem__(self, key: Any, value: Any) -> None:
        ...

    def __len__(self) -> Any:
        ...

    @property
    def nbytes(self) -> Any:
        ...

    def isna(self) -> Any:
        ...


def to_decimal(values: Any, context: Optional[Any] = ...) -> Any:
    ...

def make_data() -> Any:
    ...
