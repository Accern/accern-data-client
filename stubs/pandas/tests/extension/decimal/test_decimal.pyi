# Stubs for pandas.tests.extension.decimal.test_decimal (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,too-many-ancestors

from typing import Any, Optional
from pandas.tests.extension import base
from .array import DecimalArray, DecimalDtype, make_data, to_decimal

def dtype() -> Any:
    ...

def data() -> Any:
    ...

def data_for_twos() -> Any:
    ...

def data_missing() -> Any:
    ...

def data_for_sorting() -> Any:
    ...

def data_missing_for_sorting() -> Any:
    ...

def na_cmp() -> Any:
    ...

def na_value() -> Any:
    ...

def data_for_grouping() -> Any:
    ...


class BaseDecimal:
    def assert_series_equal(self, left: Any, right: Any, *args: Any, **kwargs: Any):
        ...

    def assert_frame_equal(self, left: Any, right: Any, *args: Any, **kwargs: Any) -> None:
        ...


class TestDtype(BaseDecimal, base.BaseDtypeTests):
    def test_hashable(self, dtype: Any) -> None:
        ...


class TestInterface(BaseDecimal, base.BaseInterfaceTests):
    ...


class TestConstructors(BaseDecimal, base.BaseConstructorsTests):
    def test_from_dtype(self, data: Any) -> None:
        ...


class TestReshaping(BaseDecimal, base.BaseReshapingTests):
    ...


class TestGetitem(BaseDecimal, base.BaseGetitemTests):
    def test_take_na_value_other_decimal(self) -> None:
        ...


class TestMissing(BaseDecimal, base.BaseMissingTests):
    ...


class Reduce:
    def check_reduce(self, s: Any, op_name: Any, skipna: Any) -> None:
        ...


class TestNumericReduce(Reduce, base.BaseNumericReduceTests):
    ...

class TestBooleanReduce(Reduce, base.BaseBooleanReduceTests):
    ...


class TestMethods(BaseDecimal, base.BaseMethodsTests):
    def test_value_counts(self, all_data: Any, dropna: Any) -> None:
        ...


class TestCasting(BaseDecimal, base.BaseCastingTests):
    ...


class TestGroupby(BaseDecimal, base.BaseGroupbyTests):
    def test_groupby_apply_identity(self, data_for_grouping: Any) -> None:
        ...


class TestSetitem(BaseDecimal, base.BaseSetitemTests):
    ...


class TestPrinting(BaseDecimal, base.BasePrintingTests):
    def test_series_repr(self, data: Any) -> None:
        ...


def test_series_constructor_coerce_data_to_extension_dtype_raises() -> None:
    ...

def test_series_constructor_with_dtype() -> None:
    ...

def test_dataframe_constructor_with_dtype() -> None:
    ...

def test_astype_dispatches(frame: Any) -> None:
    ...


class TestArithmeticOps(BaseDecimal, base.BaseArithmeticOpsTests):
    def check_opname(self, s: Any, op_name: Any, other: Any, exc: Optional[Any] = ...) -> None:
        ...

    def test_arith_series_with_array(self, data: Any, all_arithmetic_operators: Any) -> None:
        ...

    def test_error(self) -> None:  # type: ignore
        ...


class TestComparisonOps(BaseDecimal, base.BaseComparisonOpsTests):
    def check_opname(self, s: Any, op_name: Any, other: Any, exc: Optional[Any] = ...) -> None:
        ...

    def test_compare_scalar(self, data: Any, all_compare_operators: Any) -> None:
        ...

    def test_compare_array(self, data: Any, all_compare_operators: Any) -> None:
        ...


class DecimalArrayWithoutFromSequence(DecimalArray):
    ...

class DecimalArrayWithoutCoercion(DecimalArrayWithoutFromSequence):
    ...


def test_combine_from_sequence_raises() -> None:
    ...

def test_scalar_ops_from_sequence_raises(class_: Any) -> None:
    ...

def test_divmod_array(reverse: Any, expected_div: Any, expected_mod: Any) -> None:
    ...

def test_ufunc_fallback(data: Any) -> None:
    ...

def test_formatting_values_deprecated():
    ...

def test_array_ufunc() -> None:
    ...

def test_array_ufunc_series() -> None:
    ...

def test_array_ufunc_series_scalar_other() -> None:
    ...

def test_array_ufunc_series_defer() -> None:
    ...
