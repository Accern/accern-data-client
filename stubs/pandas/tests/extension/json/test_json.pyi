# Stubs for pandas.tests.extension.json.test_json (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin

from typing import Any
from pandas.tests.extension import base

def dtype():
    ...

def data():
    ...

def data_missing():
    ...

def data_for_sorting():
    ...

def data_missing_for_sorting():
    ...

def na_value(dtype: Any) -> Any:
    ...

def na_cmp():
    ...

def data_for_grouping():
    ...


class BaseJSON:
    def assert_series_equal(self, left: Any, right: Any, **kwargs: Any) -> None:
        ...

    def assert_frame_equal(self, left: Any, right: Any, *args: Any, **kwargs: Any) -> None:
        ...


class TestDtype(BaseJSON, base.BaseDtypeTests):
    ...


class TestInterface(BaseJSON, base.BaseInterfaceTests):
    def test_custom_asserts(self) -> None:
        ...


class TestConstructors(BaseJSON, base.BaseConstructorsTests):
    def test_from_dtype(self, data: Any) -> None:
        ...


class TestReshaping(BaseJSON, base.BaseReshapingTests):
    def test_stack(self) -> None:  # type: ignore
        ...

    def test_unstack(self, data: Any, index: Any):  # type: ignore
        ...


class TestGetitem(BaseJSON, base.BaseGetitemTests):
    ...


class TestMissing(BaseJSON, base.BaseMissingTests):
    def test_fillna_series(self) -> None:  # type: ignore
        ...

    def test_fillna_frame(self) -> None:  # type: ignore
        ...


unhashable: Any
unstable: Any

class TestReduce(base.BaseNoReduceTests):
    ...


class TestMethods(BaseJSON, base.BaseMethodsTests):
    def test_value_counts(self, all_data: Any, dropna: Any) -> None:
        ...

    def test_sort_values_frame(self) -> None:  # type: ignore
        ...

    def test_argsort(self, data_for_sorting: Any) -> None:
        ...

    def test_argsort_missing(self, data_missing_for_sorting: Any) -> None:
        ...

    def test_sort_values(self, data_for_sorting: Any, ascending: Any) -> None:
        ...

    def test_sort_values_missing(self, data_missing_for_sorting: Any, ascending: Any) -> None:
        ...

    def test_combine_le(self, data_repeated: Any) -> None:
        ...

    def test_combine_add(self, data_repeated: Any) -> None:
        ...

    def test_combine_first(self, data: Any) -> None:
        ...

    def test_hash_pandas_object_works(self, data: Any, kind: Any) -> None:
        ...

    def test_where_series(self, data: Any, na_value: Any) -> None:  # type: ignore
        ...

    def test_searchsorted(self, data_for_sorting: Any) -> None:  # type: ignore
        ...


class TestCasting(BaseJSON, base.BaseCastingTests):
    def test_astype_str(self) -> None:  # type: ignore
        ...


class TestGroupby(BaseJSON, base.BaseGroupbyTests):
    def test_groupby_extension_transform(self) -> None:  # type: ignore
        ...

    def test_groupby_extension_apply(self) -> None:  # type: ignore
        ...

    def test_groupby_extension_agg(self, as_index: Any, data_for_grouping: Any) -> None:
        ...


class TestArithmeticOps(BaseJSON, base.BaseArithmeticOpsTests):
    def test_error(self, data: Any, all_arithmetic_operators: Any) -> None:
        ...

    def test_add_series_with_extension_array(self, data: Any) -> None:
        ...

    def test_divmod_series_array(self) -> None:  # type: ignore
        ...


class TestComparisonOps(BaseJSON, base.BaseComparisonOpsTests):
    ...

class TestPrinting(BaseJSON, base.BasePrintingTests):
    ...
