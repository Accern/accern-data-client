# Stubs for pandas.tests.extension.base.getitem (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,import-error

from typing import Any
from .base import BaseExtensionTests

class BaseGetitemTests(BaseExtensionTests):
    def test_iloc_series(self, data: Any) -> None:
        ...

    def test_iloc_frame(self, data: Any) -> None:
        ...

    def test_loc_series(self, data: Any) -> None:
        ...

    def test_loc_frame(self, data: Any) -> None:
        ...

    def test_loc_iloc_frame_single_dtype(self, data: Any) -> None:
        ...

    def test_getitem_scalar(self, data: Any) -> None:
        ...

    def test_getitem_scalar_na(self, data_missing: Any, na_cmp: Any, na_value: Any) -> None:
        ...

    def test_getitem_mask(self, data: Any) -> None:
        ...

    def test_getitem_slice(self, data: Any) -> None:
        ...

    def test_get(self, data: Any) -> None:
        ...

    def test_take_sequence(self, data: Any) -> None:
        ...

    def test_take(self, data: Any, na_value: Any, na_cmp: Any) -> None:
        ...

    def test_take_empty(self, data: Any, na_value: Any, na_cmp: Any) -> None:
        ...

    def test_take_negative(self, data: Any) -> None:
        ...

    def test_take_non_na_fill_value(self, data_missing: Any) -> None:
        ...

    def test_take_pandas_style_negative_raises(self, data: Any, na_value: Any) -> None:
        ...

    def test_take_out_of_bounds_raises(self, data: Any, allow_fill: Any) -> None:
        ...

    def test_take_series(self, data: Any) -> None:
        ...

    def test_reindex(self, data: Any, na_value: Any) -> None:
        ...

    def test_reindex_non_na_fill_value(self, data_missing: Any) -> None:
        ...
