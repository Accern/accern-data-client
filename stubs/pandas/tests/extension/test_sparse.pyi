# Stubs for pandas.tests.extension.test_sparse (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,too-many-ancestors

from typing import Any
from pandas.tests.extension import base

def make_data(fill_value: Any) -> Any:
    ...


def dtype():
    ...


def data(request: Any) -> Any:
    ...


def data_for_twos(request: Any) -> Any:
    ...


def data_missing(request: Any) -> Any:
    ...


def data_repeated(request: Any) -> None:
    ...


def data_for_sorting(request: Any) -> Any:
    ...


def data_missing_for_sorting(request: Any) -> Any:
    ...


def na_value():
    ...


def na_cmp():
    ...


def data_for_grouping(request: Any) -> Any:
    ...


class BaseSparseTests:
    def test_ravel(self, data: Any) -> None:
        ...



class TestDtype(BaseSparseTests, base.BaseDtypeTests):
    def test_array_type_with_arg(self, data: Any, dtype: Any) -> None:
        ...


class TestInterface(BaseSparseTests, base.BaseInterfaceTests):
    def test_no_values_attribute(self, data: Any) -> None:
        ...

    def test_copy(self, data: Any) -> None:
        ...


class TestConstructors(BaseSparseTests, base.BaseConstructorsTests):
    ...



class TestReshaping(BaseSparseTests, base.BaseReshapingTests):
    def test_concat_mixed_dtypes(self, data: Any) -> None:
        ...

    def test_concat_columns(self, data: Any, na_value: Any) -> None:
        ...

    def test_align(self, data: Any, na_value: Any) -> None:
        ...

    def test_align_frame(self, data: Any, na_value: Any) -> None:
        ...

    def test_align_series_frame(self, data: Any, na_value: Any) -> None:
        ...

    def test_merge(self, data: Any, na_value: Any) -> None:
        ...


class TestGetitem(BaseSparseTests, base.BaseGetitemTests):
    def test_get(self, data: Any) -> None:
        ...

    def test_reindex(self, data: Any, na_value: Any) -> None:
        ...


class TestMissing(BaseSparseTests, base.BaseMissingTests):
    def test_isna(self, data_missing: Any) -> None:
        ...

    def test_fillna_limit_pad(self, data_missing: Any) -> None:
        ...

    def test_fillna_limit_backfill(self, data_missing: Any) -> None:
        ...

    def test_fillna_series_method(self, data_missing: Any) -> None:  # type: ignore
        ...

    def test_fillna_series(self) -> None:  # type: ignore
        ...

    def test_fillna_frame(self, data_missing: Any) -> None:
        ...


class TestMethods(BaseSparseTests, base.BaseMethodsTests):
    def test_combine_le(self, data_repeated: Any) -> None:
        ...

    def test_fillna_copy_frame(self, data_missing: Any) -> None:
        ...

    def test_fillna_copy_series(self, data_missing: Any) -> None:
        ...

    def test_fillna_length_mismatch(self, data_missing: Any) -> None:
        ...

    def test_where_series(self, data: Any, na_value: Any) -> None:  # type: ignore
        ...

    def test_combine_first(self, data: Any) -> None:
        ...

    def test_searchsorted(self, data_for_sorting: Any, as_series: Any) -> None:
        ...


class TestCasting(BaseSparseTests, base.BaseCastingTests):
    ...


class TestArithmeticOps(BaseSparseTests, base.BaseArithmeticOpsTests):
    series_scalar_exc: Any = ...
    frame_scalar_exc: Any = ...
    divmod_exc: Any = ...
    series_array_exc: Any = ...
    def test_error(self, data: Any, all_arithmetic_operators: Any) -> None:
        ...

    def test_arith_series_with_scalar(self, data: Any, all_arithmetic_operators: Any) -> None:
        ...

    def test_arith_series_with_array(self, data: Any, all_arithmetic_operators: Any) -> None:
        ...


class TestComparisonOps(BaseSparseTests, base.BaseComparisonOpsTests):
    ...



class TestPrinting(BaseSparseTests, base.BasePrintingTests):
    def test_array_repr(self, data: Any, size: Any) -> None:
        ...



class TestParsing(BaseSparseTests, base.BaseParsingTests):
    def test_EA_types(self, engine: Any, data: Any) -> None:
        ...
