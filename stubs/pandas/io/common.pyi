# Stubs for pandas.io.common (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member


from io import BytesIO
from typing import Any, Optional
import zipfile
from pandas.errors import ParserError

CParserError = ParserError


class BaseIterator:
    def __iter__(self) -> Any:
        ...

    def __next__(self) -> None:
        ...


def is_s3_url(url: Any) -> Any:
    ...


def is_gcs_url(url: Any) -> Any:
    ...


def get_filepath_or_buffer(filepath_or_buffer: Any,
                           encoding: Optional[Any] = ...,
                           compression: Optional[Any] = ...,
                           mode: Optional[Any] = ...) -> Any:
    ...


def file_path_to_url(path: Any) -> Any:
    ...


class BytesZipFile(zipfile.ZipFile, BytesIO):  # type: ignore
    def __init__(self, file: Any, mode: Any, compression: Any = ...,
                 **kwargs: Any) -> None:
        ...

    def write(self, data: Any) -> None:  # type: ignore
        ...


class MMapWrapper(BaseIterator):
    mmap: Any = ...

    def __init__(self, f: Any) -> None:
        ...

    def __getattr__(self, name: Any) -> Any:
        ...

    def __iter__(self) -> Any:
        ...

    def __next__(self) -> Any:
        ...


class UTF8Recoder(BaseIterator):
    reader: Any = ...

    def __init__(self, f: Any, encoding: Any) -> None:
        ...

    def read(self, bytes: int = ...) -> Any:
        ...

    def readline(self) -> Any:
        ...

    def next(self) -> Any:
        ...


def UnicodeReader(f: Any, dialect: Any = ..., encoding: str = ...,
                  **kwds: Any) -> Any:
    ...


def UnicodeWriter(f: Any, dialect: Any = ..., encoding: str = ...,
                  **kwds: Any) -> Any:
    ...
