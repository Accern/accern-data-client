# Stubs for pandas.io.formats.html (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member

from typing import Any, Dict, List, Optional, Tuple, Union
from pandas.io.formats.format import DataFrameFormatter, TableFormatter

class HTMLFormatter(TableFormatter):
    indent_delta: int = ...
    fmt: Any = ...
    classes: Any = ...
    frame: Any = ...
    columns: Any = ...
    elements: Any = ...
    bold_rows: Any = ...
    escape: Any = ...
    show_dimensions: Any = ...
    border: Any = ...
    table_id: Any = ...
    render_links: Any = ...
    def __init__(self, formatter: DataFrameFormatter, classes: Optional[Union[str, List, Tuple]] = ..., border: Optional[bool] = ...) -> None:
        ...

    @property
    def show_row_idx_names(self) -> bool:
        ...

    @property
    def show_col_idx_names(self) -> bool:
        ...

    @property
    def row_levels(self) -> int:
        ...

    @property
    def is_truncated(self) -> bool:
        ...

    @property
    def ncols(self) -> int:
        ...

    def write(self, s: str, indent: int = ...) -> None:
        ...

    def write_th(self, s: str, header: bool = ..., indent: int = ..., tags: Optional[str] = ...) -> None:
        ...

    def write_td(self, s: str, indent: int = ..., tags: Optional[str] = ...) -> None:
        ...

    def write_tr(self, line: List[str], indent: int = ..., indent_delta: int = ..., header: bool = ..., align: Optional[str] = ..., tags: Optional[Dict[int, str]] = ..., nindex_levels: int = ...) -> None:
        ...

    def render(self) -> List[str]:
        ...


class NotebookFormatter(HTMLFormatter):
    def write_style(self) -> None:
        ...

    def render(self) -> List[str]:
        ...
