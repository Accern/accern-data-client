# Stubs for pandas.io.formats.style (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member

from typing import Any, Optional

jinja2: Any
has_mpl: bool
no_mpl_message: str

class Styler:
    loader: Any = ...
    env: Any = ...
    template: Any = ...
    ctx: Any = ...
    data: Any = ...
    index: Any = ...
    columns: Any = ...
    uuid: Any = ...
    table_styles: Any = ...
    caption: Any = ...
    precision: Any = ...
    table_attributes: Any = ...
    hidden_index: bool = ...
    hidden_columns: Any = ...
    cell_ids: Any = ...
    def __init__(self, data: Any, precision: Optional[Any] = ..., table_styles: Optional[Any] = ..., uuid: Optional[Any] = ..., caption: Optional[Any] = ..., table_attributes: Optional[Any] = ..., cell_ids: bool = ...) -> None:
        ...

    def to_excel(self, excel_writer: Any, sheet_name: str = ..., na_rep: str = ..., float_format: Optional[Any] = ..., columns: Optional[Any] = ..., header: bool = ..., index: bool = ..., index_label: Optional[Any] = ..., startrow: int = ..., startcol: int = ..., engine: Optional[Any] = ..., merge_cells: bool = ..., encoding: Optional[Any] = ..., inf_rep: str = ..., verbose: bool = ..., freeze_panes: Optional[Any] = ...) -> None:
        ...

    def format(self, formatter: Any, subset: Optional[Any] = ...) -> Any:
        ...

    def render(self, **kwargs: Any) -> Any:
        ...

    def __copy__(self) -> Any:
        ...

    def __deepcopy__(self, memo: Any) -> Any:
        ...

    def clear(self) -> None:
        ...

    def apply(self, func: Any, axis: int = ..., subset: Optional[Any] = ..., **kwargs: Any) -> Any:
        ...

    def applymap(self, func: Any, subset: Optional[Any] = ..., **kwargs: Any) -> Any:
        ...

    def where(self, cond: Any, value: Any, other: Optional[Any] = ..., subset: Optional[Any] = ..., **kwargs: Any) -> Any:
        ...

    def set_precision(self, precision: Any) -> Any:
        ...

    def set_table_attributes(self, attributes: Any) -> Any:
        ...

    def export(self) -> Any:
        ...

    def use(self, styles: Any) -> Any:
        ...

    def set_uuid(self, uuid: Any) -> Any:
        ...

    def set_caption(self, caption: Any) -> Any:
        ...

    def set_table_styles(self, table_styles: Any) -> Any:
        ...

    def hide_index(self) -> Any:
        ...

    def hide_columns(self, subset: Any) -> Any:
        ...

    def highlight_null(self, null_color: str = ...) -> Any:
        ...

    def background_gradient(self, cmap: str = ..., low: int = ..., high: int = ..., axis: int = ..., subset: Optional[Any] = ..., text_color_threshold: float = ...) -> Any:
        ...

    def set_properties(self, subset: Optional[Any] = ..., **kwargs: Any) -> Any:
        ...

    def bar(self, subset: Optional[Any] = ..., axis: int = ..., color: str = ..., width: int = ..., align: str = ..., vmin: Optional[Any] = ..., vmax: Optional[Any] = ...) -> Any:
        ...

    def highlight_max(self, subset: Optional[Any] = ..., color: str = ..., axis: int = ...) -> Any:
        ...

    def highlight_min(self, subset: Optional[Any] = ..., color: str = ..., axis: int = ...) -> Any:
        ...

    @classmethod
    def from_custom_template(cls, searchpath: Any, name: Any) -> Any:
        ...

    def pipe(self, func: Any, *args: Any, **kwargs: Any) -> Any:
        ...
