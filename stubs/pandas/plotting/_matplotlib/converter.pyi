# Stubs for pandas.plotting._matplotlib.converter (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member,import-error

from typing import Any, Optional
import matplotlib.dates as dates
import matplotlib.units as units
from matplotlib.ticker import Formatter, Locator

HOURS_PER_DAY: float
MIN_PER_HOUR: float
SEC_PER_MIN: float
SEC_PER_HOUR: Any
SEC_PER_DAY: Any
MUSEC_PER_DAY: Any

def get_pairs() -> Any:
    ...

def register(explicit: bool = ...) -> None:
    ...

def deregister() -> None:
    ...

def time2num(d: Any) -> Any:
    ...


class TimeConverter(units.ConversionInterface):
    @staticmethod
    def convert(value: Any, unit: Any, axis: Any) -> Any:
        ...

    @staticmethod
    def axisinfo(unit: Any, axis: Any) -> Any:
        ...

    @staticmethod
    def default_units(x: Any, axis: Any) -> Any:
        ...


class TimeFormatter(Formatter):
    locs: Any = ...
    def __init__(self, locs: Any) -> None:
        ...

    def __call__(self, x: Any, pos: int = ...) -> Any:
        ...


class PeriodConverter(dates.DateConverter):
    @staticmethod
    def convert(values: Any, units: Any, axis: Any) -> Any:
        ...


def get_datevalue(date: Any, freq: Any) -> Any:
    ...


class DatetimeConverter(dates.DateConverter):
    @staticmethod
    def convert(values: Any, unit: Any, axis: Any) -> Any:
        ...

    @staticmethod
    def axisinfo(unit: Any, axis: Any) -> Any:
        ...


class PandasAutoDateFormatter(dates.AutoDateFormatter):
    def __init__(self, locator: Any, tz: Optional[Any] = ..., defaultfmt: str = ...) -> None:
        ...


class PandasAutoDateLocator(dates.AutoDateLocator):
    def get_locator(self, dmin: Any, dmax: Any) -> Any:
        ...


class MilliSecondLocator(dates.DateLocator):
    UNIT: Any = ...
    def __init__(self, tz: Any) -> None:
        ...

    @staticmethod
    def get_unit_generic(freq: Any) -> Any:
        ...

    def __call__(self) -> Any:
        ...

    def autoscale(self) -> Any:
        ...


def period_break(dates: Any, period: Any) -> Any:
    ...


def has_level_label(label_flags: Any, vmin: Any) -> Any:
    ...


def get_finder(freq: Any) -> Any:
    ...


class TimeSeries_DateLocator(Locator):
    freq: Any = ...
    base: Any = ...
    isminor: Any = ...
    isdynamic: Any = ...
    offset: int = ...
    plot_obj: Any = ...
    finder: Any = ...
    def __init__(self, freq: Any, minor_locator: bool = ..., dynamic_mode: bool = ..., base: int = ..., quarter: int = ..., month: int = ..., day: int = ..., plot_obj: Optional[Any] = ...) -> None:
        ...

    def __call__(self) -> Any:
        ...

    def autoscale(self) -> Any:
        ...


class TimeSeries_DateFormatter(Formatter):
    format: Any = ...
    freq: Any = ...
    locs: Any = ...
    formatdict: Any = ...
    isminor: Any = ...
    isdynamic: Any = ...
    offset: int = ...
    plot_obj: Any = ...
    finder: Any = ...
    def __init__(self, freq: Any, minor_locator: bool = ..., dynamic_mode: bool = ..., plot_obj: Optional[Any] = ...) -> None:
        ...

    def set_locs(self, locs: Any) -> None:
        ...

    def __call__(self, x: Any, pos: int = ...) -> Any:
        ...


class TimeSeries_TimedeltaFormatter(Formatter):
    @staticmethod
    def format_timedelta_ticks(x: Any, pos: Any, n_decimals: Any) -> Any:
        ...

    def __call__(self, x: Any, pos: int = ...) -> Any:
        ...
