# Stubs for pandas (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-import,useless-import-alias,unused-argument
# pylint: disable=import-error,redefined-builtin,too-few-public-methods

from datetime import datetime
from typing import Any

from pandas._config import (
    get_option as get_option,
    set_option as set_option,
    reset_option as reset_option,
    describe_option as describe_option,
    option_context as option_context,
    options as options,
)

# let init-time option registration happen
import pandas.core.config_init

from pandas.core.api import (
    # dtype
    Int8Dtype as Int8Dtype,
    Int16Dtype as Int16Dtype,
    Int32Dtype as Int32Dtype,
    Int64Dtype as Int64Dtype,
    UInt8Dtype as UInt8Dtype,
    UInt16Dtype as UInt16Dtype,
    UInt32Dtype as UInt32Dtype,
    UInt64Dtype as UInt64Dtype,
    CategoricalDtype as CategoricalDtype,
    PeriodDtype as PeriodDtype,
    IntervalDtype as IntervalDtype,
    DatetimeTZDtype as DatetimeTZDtype,
    # missing
    isna as isna,
    isnull as isnull,
    notna as notna,
    notnull as notnull,
    # indexes
    Index as Index,
    CategoricalIndex as CategoricalIndex,
    Int64Index as Int64Index,
    UInt64Index as UInt64Index,
    RangeIndex as RangeIndex,
    Float64Index as Float64Index,
    MultiIndex as MultiIndex,
    IntervalIndex as IntervalIndex,
    TimedeltaIndex as TimedeltaIndex,
    DatetimeIndex as DatetimeIndex,
    PeriodIndex as PeriodIndex,
    IndexSlice as IndexSlice,
    # tseries
    NaT as NaT,
    Period as Period,
    period_range as period_range,
    Timedelta as Timedelta,
    timedelta_range as timedelta_range,
    Timestamp as Timestamp,
    date_range as date_range,
    bdate_range as bdate_range,
    Interval as Interval,
    interval_range as interval_range,
    DateOffset as DateOffset,
    # conversion
    to_numeric as to_numeric,
    to_datetime as to_datetime,
    to_timedelta as to_timedelta,
    # misc
    Grouper as Grouper,
    factorize as factorize,
    unique as unique,
    value_counts as value_counts,
    NamedAgg as NamedAgg,
    Categorical as Categorical,
    set_eng_float_format as set_eng_float_format,
    Series as Series,
    DataFrame as DataFrame,
)

from pandas.core.arrays.sparse import (
    SparseArray as SparseArray,
    SparseDtype as SparseDtype,
)

from pandas.tseries.api import infer_freq as infer_freq
from pandas.tseries import offsets as offsets

from pandas.core.computation.api import eval as eval

from pandas.core.reshape.api import (
    concat as concat,
    lreshape as lreshape,
    melt as melt,
    wide_to_long as wide_to_long,
    merge as merge,
    merge_asof as merge_asof,
    merge_ordered as merge_ordered,
    crosstab as crosstab,
    pivot as pivot,
    pivot_table as pivot_table,
    get_dummies as get_dummies,
    cut as cut,
    qcut as qcut,
)

from pandas.util._print_versions import show_versions as show_versions

from pandas.io.api import (
    # excel
    ExcelFile as ExcelFile,
    ExcelWriter as ExcelWriter,
    read_excel as read_excel,
    # parsers
    read_csv as read_csv,
    read_fwf as read_fwf,
    read_table as read_table,
    # pickle
    read_pickle as read_pickle,
    to_pickle as to_pickle,
    # pytables
    HDFStore as HDFStore,
    read_hdf as read_hdf,
    # sql
    read_sql as read_sql,
    read_sql_query as read_sql_query,
    read_sql_table as read_sql_table,
    # misc
    read_clipboard as read_clipboard,
    read_parquet as read_parquet,
    read_feather as read_feather,
    read_gbq as read_gbq,
    read_html as read_html,
    read_json as read_json,
    read_stata as read_stata,
    read_sas as read_sas,
    read_spss as read_spss,
)

from pandas.util._tester import test
import pandas.testing
import pandas.arrays

from ._version import get_versions

__docformat__: str
hard_dependencies: Any
missing_dependencies: Any
module: Any
v: Any
__git_version__: Any


def __getattr__(name: Any) -> Any:
    ...


class Panel:
    ...
