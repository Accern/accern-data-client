from typing import Any, Callable

CUR_OS: Any
IS_WIN: Any
IS_NIX: Any
RE_ANSI: Any

class FormatReplace:
    replace: Any = ...
    format_called: int = ...
    def __init__(self, replace: str = ...) -> None: ...
    def __format__(self, _: Any) -> str: ...

class Comparable:
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...

class ObjectWrapper:
    def __getattr__(self, name: Any) -> Any: ...
    def __setattr__(self, name: Any, value: Any) -> Any: ...
    def wrapper_getattr(self, name: Any) -> Any: ...
    def wrapper_setattr(self, name: Any, value: Any) -> Any: ...
    def __init__(self, wrapped: Any) -> None: ...

class SimpleTextIOWrapper(ObjectWrapper):
    def __init__(self, wrapped: Any, encoding: Any) -> None: ...
    def write(self, s: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...

class DisableOnWriteError(ObjectWrapper):
    @staticmethod
    def disable_on_exception(tqdm_instance: Any, func: Any) -> Callable[..., Any]: ...
    def __init__(self, wrapped: Any, tqdm_instance: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...

class CallbackIOWrapper(ObjectWrapper):
    def __init__(self, callback: Any, stream: Any, method: str = ...): ...

def disp_len(data: Any) -> int: ...
def disp_trim(data: Any, length: Any) -> Any: ...
