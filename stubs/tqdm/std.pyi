from .utils import Comparable
from typing import Any, Callable, Dict, Generator, Optional

class TqdmTypeError(TypeError): ...
class TqdmKeyError(KeyError): ...

class TqdmWarning(Warning):
    def __init__(self, msg: Any, fp_write: Optional[Any] = ..., *a: Any, **k: Any) -> None: ...

class TqdmExperimentalWarning(TqdmWarning, FutureWarning): ...
class TqdmDeprecationWarning(TqdmWarning, DeprecationWarning): ...
class TqdmMonitorWarning(TqdmWarning, RuntimeWarning): ...

class TqdmDefaultWriteLock:
    th_lock: Any = ...
    locks: Any = ...
    def __init__(self) -> None: ...
    def acquire(self, *a: Any, **k: Any) -> None: ...
    def release(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *exc: Any) -> None: ...
    @classmethod
    def create_mp_lock(cls) -> None: ...
    @classmethod
    def create_th_lock(cls) -> None: ...

class Bar:
    ASCII: str = ...
    UTF: Any = ...
    BLANK: str = ...
    COLOUR_RESET: str = ...
    COLOUR_RGB: str = ...
    COLOURS: Any = ...
    frac: Any = ...
    default_len: Any = ...
    charset: Any = ...
    def __init__(self, frac: Any, default_len: int = ..., charset: Any = ..., colour: Optional[Any] = ...) -> None: ...
    @property
    def colour(self) -> Optional[str]: ...
    @colour.setter
    def colour(self, value: Any) -> None: ...
    def __format__(self, format_spec: Any) -> str: ...

class EMA:
    alpha: Any = ...
    last: int = ...
    calls: int = ...
    def __init__(self, smoothing: float = ...) -> None: ...
    def __call__(self, x: Optional[Any] = ...) -> float: ...

class tqdm(Comparable):
    monitor_interval: int = ...
    monitor: Any = ...
    @staticmethod
    def format_sizeof(num: Any, suffix: str = ..., divisor: int = ...) -> str: ...
    @staticmethod
    def format_interval(t: Any) -> str: ...
    @staticmethod
    def format_num(n: Any) -> str: ...
    @staticmethod
    def status_printer(file: Any) -> Callable[[Any], None]: ...
    @staticmethod
    def format_meter(n: Any, total: Any, elapsed: Any, ncols: Optional[Any] = ..., prefix: str = ..., ascii: bool = ..., unit: str = ..., unit_scale: bool = ..., rate: Optional[Any] = ..., bar_format: Optional[Any] = ..., postfix: Optional[Any] = ..., unit_divisor: int = ..., initial: int = ..., colour: Optional[Any] = ..., **extra_kwargs: Any) -> str: ...
    def __new__(cls, *_: Any, **__: Any) -> 'tqdm': ...
    @classmethod
    def write(cls, s: Any, file: Optional[Any] = ..., end: str = ..., nolock: bool = ...) -> None: ...
    @classmethod
    def external_write_mode(cls, file: Optional[Any] = ..., nolock: bool = ...) -> None: ...
    @classmethod
    def set_lock(cls, lock: Any) -> None: ...
    @classmethod
    def get_lock(cls) -> Any: ...
    @classmethod
    def pandas(cls, **tqdm_kwargs: Any) -> None: ...
    iterable: Any = ...
    disable: Any = ...
    pos: Any = ...
    n: Any = ...
    total: Any = ...
    leave: Any = ...
    desc: Any = ...
    fp: Any = ...
    ncols: Any = ...
    nrows: Any = ...
    mininterval: Any = ...
    maxinterval: Any = ...
    miniters: Any = ...
    dynamic_miniters: Any = ...
    ascii: Any = ...
    unit: Any = ...
    unit_scale: Any = ...
    unit_divisor: Any = ...
    initial: Any = ...
    lock_args: Any = ...
    delay: Any = ...
    gui: Any = ...
    dynamic_ncols: Any = ...
    smoothing: Any = ...
    bar_format: Any = ...
    postfix: Any = ...
    colour: Any = ...
    last_print_n: Any = ...
    sp: Any = ...
    last_print_t: Any = ...
    start_t: Any = ...
    def __init__(self, iterable: Optional[Any] = ..., desc: Optional[Any] = ..., total: Optional[Any] = ..., leave: bool = ..., file: Optional[Any] = ..., ncols: Optional[Any] = ..., mininterval: float = ..., maxinterval: float = ..., miniters: Optional[Any] = ..., ascii: Optional[Any] = ..., disable: bool = ..., unit: str = ..., unit_scale: bool = ..., dynamic_ncols: bool = ..., smoothing: float = ..., bar_format: Optional[Any] = ..., initial: int = ..., position: Optional[Any] = ..., postfix: Optional[Any] = ..., unit_divisor: int = ..., write_bytes: Optional[Any] = ..., lock_args: Optional[Any] = ..., nrows: Optional[Any] = ..., colour: Optional[Any] = ..., delay: int = ..., gui: bool = ..., **kwargs: Any) -> None: ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self) -> bool: ...
    def __len__(self) -> int: ...
    def __reversed__(self) -> Generator[Any, None, None]: ...
    def __contains__(self, item: Any) -> Any: ...
    def __enter__(self) -> 'tqdm': ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def __del__(self) -> None: ...
    def __hash__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def update(self, n: int = ...) -> Any: ...
    def close(self) -> None: ...
    def clear(self, nolock: bool = ...) -> None: ...
    def refresh(self, nolock: bool = ..., lock_args: Optional[Any] = ...) -> Optional[bool]: ...
    def unpause(self) -> None: ...
    def reset(self, total: Optional[Any] = ...) -> None: ...
    def set_description(self, desc: Optional[Any] = ..., refresh: bool = ...) -> None: ...
    def set_description_str(self, desc: Optional[Any] = ..., refresh: bool = ...) -> None: ...
    def set_postfix(self, ordered_dict: Optional[Any] = ..., refresh: bool = ..., **kwargs: Any) -> None: ...
    def set_postfix_str(self, s: str = ..., refresh: bool = ...) -> None: ...
    def moveto(self, n: Any) -> None: ...
    @property
    def format_dict(self) -> Dict[Any, Any]: ...
    def display(self, msg: Optional[Any] = ..., pos: Optional[Any] = ...) -> bool: ...
    @classmethod
    def wrapattr(cls, stream: Any, method: Any, total: Optional[Any] = ..., bytes: bool = ..., **tqdm_kwargs: Any) -> None: ...

def trange(*args: Any, **kwargs: Any) -> 'tqdm': ...
